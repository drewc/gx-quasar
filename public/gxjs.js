// File generated by Gambit v4.9.3
// Link info: (409003 (js ()) "gxjs-link" (("_gambit") ("js__gxjs-fixes") ("js__syntax") ("js__gxjs-init") ("js__gxjs-rt") ("js__gxjs-ffi")) (structure u8vector bignum_from_s32 bignum s32vector u16vector str2codes closure_alloc eof_obj unbound1_obj unbound2_obj optional_obj rest_obj key_obj apply2 make_interned_keyword absent_obj thread_save3 thread_restore4 continuation_graft_no_winding2 continuation_graft_no_winding3 continuation_graft_no_winding4 continuation_graft_no_winding5 continuation_return_no_winding2 make_subprocedure make_frame continuation continuation_next make_glo_var unbound glo-println make_f64vector current_processor keyword promise make_s8vector make_u8vector make_s16vector make_u16vector make_s32vector s32_unbox make_u32vector u32_unbox make_s64vector make_u64vector make_f32vector make_structure ratnum cpxnum values symbol s8vector s16vector u32vector u64vector s64vector f32vector f64vector unused_obj deleted_obj build_key wrong_key_args hostarray2list char s32_box u32_box make_values make_closure ilogb ldexp bignum_make continuation_capture2 will current_vm thread_save1 thread_save2 thread_restore2 continuation_capture1 thread_save4 continuation_capture3 continuation_capture4 inttemp2 inttemp1 build_rest pair flonum make_string make_interned_char nargs wrong_nargs r1 r0 ffi foreign stack sp string pollcount poll glo r2 box make_vector r3 r4 make_interned_symbol peps module_register modlinkinfo module_registry_init check_procedure_glo check_procedure) (##console-port ##host-fn-counter ##backtrace-default-max-head ##main-readtable-set! repl-display-environment? ##primordial-thread ##bignum.minus-mdigit-base ##current-readtable ##bignum.fft-mul-min-width ##get-module ##bignum.fdigit-base ##decomp-dispatch-table bytevector-length ##macro-descr ##bignum.fdigit-mask ##err-code-unimplemented ##macro-expand ##repl-location-relative ##compilation-ctx js__gxjs-rt ##stdout-port ##max-fixnum ##repl-commands-no-args ##bignum.mdigit-width/2 ##continuation-return-no-winding ##thread-trace ##min-fixnum ##err-code-EACCES ##err-code-EEXIST ##unknown-procedure-handler ##generate-proper-tail-calls ##processed-command-line ##standard-named-char-table ##err-code-ENOENT ##vm-main-module-ref ##bignum.inexact-mdigit-base ##fixnum-width ##initial-current-directory ##path->container-hook ##standard-pretty-print-formats ##help-hook ##current-directory bytevector? ##stdio/console-repl-channel ##standard-sharp-bang-table ##repl ##default-random-source ##serial-number-to-object-table ##char-to-digit-table ##allow-inner-global-define? ##repl-commands-with-1-arg ##trace-list ##feature-port-fields ##container->id-hook bytevector-u8-ref ##tcp-service-tgroup ##unicode-titlecase-dist ##display-dynamic-environment? ##current-user-interrupt-handler ##max-char current-error-port ##cleaning-up? current-directory ##shell-program ##macro-lookup ##unicode-upcase-dist ##registered-modules ##unicode-full-foldcase-start ##show-all-continuations? ##fixnum-width-neg ##repl-location-origin ##trace-depth ##primordial-exception-handler-hook ##structure-display-exception-handler-table ##expand-source ##unicode-downcase-dist ##explode-continuation ##bignum.2*min-fixnum ##initial-dynwind ##source2-marker js__syntax ##namespace-separators ##current-error-port current-output-port _gambit ##bignum.max-fixnum-div-mdigit-base ##bignum.min-fixnum-div-mdigit-base ##type-type ##unicode-class bytevector-copy! current-input-port js/syntax#js#this bytevector-copy ##os-configure-command-string-saved ##step-handlers ##structure-indent random-u8vector call/cc ##unicode-full-foldcase-mapping ##os-bat-extension-string-saved ##os-system-type-string-saved ##wr-jazz ##bignum.adigit-width ##allow-length-mismatch? ##type-exception-names ##datum-parsing-exception-names ##os-exe-extension-string-saved ##internal-expr-marker ##backtrace-default-max-tail ##object-to-serial-number-table ##main-stepper ##deferred-user-interrupt? ##structure-max-head ##feature-file-input ##gensym-counter ##container->path-hook ##eval-top ##thread-restore! ##pretty-print-shifting-allowed? ##current-exception-handler generate-proper-tail-calls current-readtable js__gxjs-fixes ##install-module ##10^-constants ##display-exception-hook ##interp-procedure-code-pointers ##current-output-port ##digit-to-char-table primordial-exception-handler bytevector-append js__gxjs-init ##keyword-counter ##apply-with-procedure-check-nary ##bignum.naive-mul-max-width ##six-types ##eval-module ##keyword-hash ##shell-command-fallback ##break-list ##symbol-counter ##bignum.fdigit-width ##tcp-service-mutex ##program-descr help-browser ##load-source-if-more-recent ##debug-modules? make-bytevector ##frame-locat-display? ##repl-display-environment? ##err-code-EAGAIN ##symbol-hash ##wr ##bignum.adigit-ones ##apply-global-with-procedure-check-nary ##path-resolve-hook ##parameter-counter ##current-input-port ##unicode-foldcase-dist ##standard-escaped-char-table ##bignum.fast-gcd-size ##bignum.mdigit-base-minus-1 ##last-serial-number ##repl-context-prompt ##bignum.adigit-zeros display-dynamic-environment? main ##scheme-file-extensions ##module-search-order ##path-unresolve-hook ##frame-call-display? ##path-expand-hook features random-real ##structure-max-field ##main-readtable ##stdin-port ##optimize-single-var-bind-values? current-user-interrupt-handler current-exception-handler ##thread-save! ##bignum.fft-mul-max-width js__gxjs-ffi default-random-source ##label-marker-tag ##repl-path-normalize-hook ##wr-meroon ##error ##expression-parsing-exception-names ##bignum.mdigit-base ##thread-make-repl-channel defer-user-interrupts ##continuation-graft-no-winding ##stderr-port ##explode-frame ##define-type-expansion-show? ##os-system-version-string-saved bytevector-u8-set! println ##main random-f64vector ##language-specs ##compilation-scope random-integer bytevector ##help-browser ##exit-jobs ##err-code-EINTR ##interaction-cte ##cond-expand-features ##allow-multi-var-bindings? ##feature-intr-terminate ##gsi-option-handlers ##module-path-sep ##source1-marker ##list-max-head ##bignum.mdigit-width ##gc-report? ##tcp-service-table ##bignum.mdigit-base*16 ##repl-context-command ##reciprocal-cache) (path-strip-extension append-s32vectors file-info-last-change-time ##structure-ref symbol-hash ##fail-check-device-input-port ##random-source-state-ref ##s64vector-length ##make-global-var ##floor-quotient ##s16vector-fill! path-strip-volume expression-parsing-exception-source ##repl-channel-pinpoint-continuation ##step-off ##continuation-denv-set! caaadr ##complex? host-info ##console-port mutex-specific ##subvector-fill! ##host-fn-counter ##group-info ##raise-unbound-serial-number-exception ##exact-int.sqrt fxmin ##object->u8vector ##make-default-entry-hook ##backtrace-default-max-head no-such-file-or-directory-exception-procedure unbound-key-exception-arguments string-copy ##allow-multi-var-bindings?-set! ##load ##expand-supply-or-demand-module ##display char-ci=? reverse! js#js->scm ##fx> ##file-info-aux input-port-line ##output-port-readtable-set! ##modref-hosted? f32vector-fill! ##tan fxnegative? ##floor/ nonempty-input-port-character-buffer-exception? ##f64vector-equal? char-foldcase ##main-readtable-set! ##string->number fxlength ##s32vector-fill! ##raise-keyword-expected-exception flzero? ##bignum.adigit-bitwise-andc2! syn#expand-template ##ctanh ##fl+* ##fleqv? ##add-job! eval ##wrap-op2 make-mutex random-source-state-ref u32vector-copy ##step-handler-continue make-u8vector ##open-process newline f32vector-set! interaction-environment ##u32vector-set all-bits-set? ##raise-error-exception file-exists-exception? ##top-cte-clone s16vector-ref write-simple nonprocedure-operator-exception-code char>? nonprocedure-operator-exception-rte ##wr-pair ##s64vector-set vector-copy ##fail-check-no-such-file-or-directory-exception bitwise-xor ##flonum->ratnum wrong-number-of-values-exception-vals ##file-info? module-not-found-exception-procedure ##ratnum.< ##wr-other ##bitwise-and2 ##path-extension-start ##locat-position ##subprocedure-nb-closed repl-display-environment? file-type ##open-process-generic ##create-directory ##cte-add-namespace string=? subu64vector-move! ##comp-let* ##degen-quasi-unquote path-normalize mutex-lock! ##find-mod-info atan f64vector-shrink! ##fail-check-f32vector ##build-read-macro ##bignum.normalize! ##u32vector-fill! ##type-super ##source-locat ##bignum.adigit-bitwise-xor! ##flinteger? ##dynamic-ref ##raise-wrong-number-of-arguments-exception ##read-datum-or-label-or-none ##and? ##primordial-thread ##> ##structure-display-exception-handler-register! ##os-port-decode-chars! ##- ##string<=? ##os-path-normalize-directory ##step-level-set! ##thread-check-timeouts! ##subu8vector ##type-exception-names-set! list->vector + ##bignum.minus-mdigit-base ##comp-let-like-form ##fail-check-mailbox-receive-timeout-exception group-info-members ##repl-cmd-eval-print output-port? u8vector char-alphabetic? ##exception->procedure ##degen-quasi-cons ##head->open-close ##wr-u32vector ##current-readtable length-mismatch-exception? path-strip-directory u16vector-length open-input-u8vector char->integer assv max ##fail-check-inexact-real ##cprc-cond-send-sub ##write-substring ##compilation-ctx-module-ref-set! ##os-device-directory-open-path ##exact-int->flonum ##s64vector ##create-directory-or-fifo ##round ##fail-check-char ##string->c-id ##convert-source-to-locat! ##get-heartbeat-interval! ##fold-right s16vector->list ##fxwraparithmetic-shift ##bignum.fft-mul-min-width inactive-thread-exception-arguments ##open-vector-pipe syn#template-ellipsis? ##open-u8vector-pipe ##default-path-expand ##module-var-set! ##input-port-bytes-buffered ##peek-char0 ##u8vector? file-error? ##repl-channel-ports-confirm s64vector->list ##locat-container ##list->f32vector ##char>=? ##dynamic-env->list ##get-module ##cprc-app3-sub ##string-length ##expression-parsing-exception-names-set! ##bignum.fdigit-base ##u64vector-fill! apply ##f64vector-set ##cprc-glo-define-values-rest ##wr-u16vector make-thread-group ##fail-check-event-queue-port ##os-device-tty-history-set! ##u64vector-equal? ##cdddr ##make-u64vector ##divide f64vector ##make-marktable ##bignum.mdigit-quotient ##repl-context-restart-exec ##raise-unbound-global-exception fx+ ##call-with-output-string ##fxwraparithmetic-shift-left processor? ##type-name ##gen-seq ##caddar ##global-vars ##label-marker-define ##decomp-dispatch-table s64vector-ref flasin random-source-make-integers ##r7rs-raise bytevector-length ##subs16vector-move! path-expand ##macro-descr ##cprc-top cdr subu64vector-fill! ##cprc-guard-reraise ##cprc-quasi-list->vector ##structure-set! ##repl-context-prompt-set! with-output-to-file ##interrupt-vector-set! ##ceiling ##asin random-source-make-u8vectors ##f64vector->list ##wr-promise flsquare symbol=? subs64vector ##os-device-stream-write ##gc-hash-table? ##top-cte-add-macro! xcons ##open-vector-pipe-generic ##os-port-encode-chars! ##fail-check-terminated-thread-exception list-set ##trace open-process ##tty? ##bignum.fdigit-mask replace-bit-field ##build-module-subprocess ##u32vector-ref ##table-set! continuation-capture ##make-writeenv subvector-fill! ##eqv?-hash syn#define-syntax-form-transformer os-exception-code close-output-port ##fxorc1 ##abs ##err-code-unimplemented ##repl-channel-ports-display-multiline-message ##meroon? ##unbox ##open-input-process ##fl<= ##tty-paren-balance-duration-set! ##none-marker process-times ##display-continuation-backtrace thread-group->thread-group-vector ##open-event-queue ##repl-channel-display-monoline-message close-port ##thread-check-interrupts! fxwrap* s8vector-fill! ##build-delimited-string cons* no-such-file-or-directory-exception-arguments ##list->s8vector vector-for-each ##wr-mark-end js__syntax# thread-quantum-set! with-exception-handler ##bignum.+ error-object-message ##fail-check-tls-version ##main-set! ##extract-bindings uninterned-symbol? dynamic-wind ##list->s64vector ##absent-object ##thread-btq-insert! ##char-upper-case? file-last-modification-time ##parameter? ##macro-expand ##current-stepper ##repl-location-relative ##raise-datum-parsing-exception ##string<?2 ##exact-int->string ##thread-check-devices! ##psettings->output-width u8vector-set! uncaught-exception? ##raise-divide-by-zero-exception ##fail-check-u64vector ##structure? ##char-wbuf-drain-no-reset ##exact->inexact ##read-sharp-dot ##parse-module-ref subs32vector ##string>=? subu16vector-move! ##make-s16vector thread-start! ##fail-check-integer fxwraplogical-shift-right s16vector-set open-dummy ##box ##gen-if2 ##degen-case-list ##butlast flacos ##degen-if3 ##fail-check-byte-input-port fl= last ##build-list ##cprc-let-values ##fail-check-will ##compilation-ctx ##add-to-set-ordered! bitwise-orc2 protocol-info-name ##wr-mark ##readtable-copy-shallow ##repl-cmd-b ##bitwise-orc2 ##macro-lookup-set! ##readtable-char-class-set! close-input-port ##toq-reposition! ##fail-check-f64vector-list f64vector->list step-level-set! file-device ##fl+ ##subprocedure-nb-parameters ##parse-module-ref-possibly-relative ##set-debug-settings! ##process-times ##u8-ready? ##close-port process-pid ##f32vector-copy ##subs64vector-move! ##cadddr ##log2 ##assoc ##replace-bit-field thread-state-abnormally-terminated-reason ##u16vector-set ##subf32vector-move! ##force-out-of-line ##exception->locat ##code-root-parent fxnor ##open-directory-aux ##pair? started-thread-exception? ##append-f64vectors make-thread raise ##s8vector-copy! ##append-names-checking-duplicates ##tanh thread-resume! ##degen-let-values ##degen-delay file-last-change-time ##wr-s8vector ##stdout-port ##comp-list-template ##cte-top-cte ##u32vector-insert ##thread-make-repl-channel-set! ##s8vector-insert ##string-delete directory-files ##init-gambit-program ##current-directory-filter flhypot ##subs8vector-fill! ##make-directory-port ##repl-channel-ports-newline ##max-fixnum ##os-device-close ##floor ##string-contains number? file-info-mode ##cte-macro? ##repl-commands-no-args ##raise-unknown-keyword-argument-exception magnitude ##six-type? ##exit-with-err-code ##comp-letrec-values u8vector? ##structure-set ##fail-check-u16vector string-set! ##create-link subf32vector-move! ##bignum.mdigit-width/2 ##fxzero? open-input-file ##bignum.arithmetic-shift ##wr-complex s32vector-shrink! ##s32vector-append ##symbol-hash-set! s8vector-set ##flsin ##s8vector-copy command-line ##direct-structure-set! ##cdddar ##string-ci<? ##make-input-path-psettings s16vector? ##current-thread ##s64vector-set! ##substring ##u64vector-shrink! ##encoding->object invalid-utf8-encoding-exception? ##meta-info-add! ##remq ##readtable-char-delimiter?-set! ##direct-structure-cas! ##make-empty-repl-result-history ##continuation-return-no-winding ##var-c? ##processor ##cprc-prc-rest ##get-parallelism-level string->vector ##raise-uncaught-exception ##flmax u32vector-set file-info-owner ##tty-text-attributes-set! ##search-or-else-install-module ##filepos-line string<=? ##gen-glo-define-values-rest ##tgroup->tgroup-vector ##fx* ##unchecked-structure-set! ##list->values nonprocedure-operator-exception-operator ##make-vector-pipe-port ##fail-check-os-exception ##repl-cmd-ed-with-1-arg ##object-before? ##special? open-string-pipe ##vector-delete ##default-wr ##fail-check-output-port ##gcd ##module-system-configuration-string ##u64vector? ##list->s16vector ##continuation-next-frame ##fail-check-mutex ##thread-trace thread-state-waiting? ##make-full-name ##u8vector-copy! ##degen-app2 vector-map ##make-u16vector s32vector-copy file-info-inode ##comp-let ##min ##make-filepos ##s32vector? ##degen-let ##path-resolve tanh ##file-info-attributes ##position->filepos ##sin ##subproblem-apply1 ##min-fixnum integer-nth-root ##char-foldcase ##fxnot condition-variable-name ##f32vector-shrink! ##type-flags ##extend-module-aliases ##host-exec-dynamic ##make-top-cte ##comp-let*-values ##angle ##open-file-generic unbound-key-exception-procedure ##degen-quasi-extract ##ratnum->string ##repl-channel-newline ##random-source-state-set! wrong-number-of-arguments-exception-procedure ##fail-check-s8vector ##f32vector-delete ##os-device-stream-width ##f32vector-copy! ##execute-jobs! ##bignum.adigit-bitwise-orc2! ##fail-check-thread-state-normally-terminated untrace u16vector? unbound-os-environment-variable-exception-procedure ##repl-channel-read-command ##gen-loc-define-values-no-step ##frame-ret ##cte-frame ##err-code-EACCES copy-file s8vector-copy thread-state-waiting-for char-lower-case? ##subprocedure-locals ##err-code-EEXIST ##string-ref ##dynamic-env-bind ##add-cond-expand-features ##bitwise-xor2 ##make-event-queue-port ##cprc-loc-ref-2-3 ##unknown-procedure-handler ##read-sharp-other ##tty-mode-set! ##subu16vector-fill! ##eval protocol-info-number ##continuation-graft-aux cdadar u64vector-copy! eq?-hash ##open-input-vector ##write-char1? finite? ##meta-info-combine! list->u16vector ##continuation-return ##wr-vector-aux3 ##fail-check-exact-integer-or-string-or-settings u8vector->object f64vector-length uninitialized-thread-exception? open-binary-output-file for-each fxxor ##generate-proper-tail-calls ##f32vector-length ##processed-command-line ##path-expand-in-initial-current-directory js__gxjs-ffi# ##odd? make-u32vector ##startup-processor! ##gen-case-list ##degen-guard-reraise ##fail-check-group-info ##standard-named-char-table ##list->vector ##fxquotient char<=? flpositive? ##fail-check-exact-signed-int64 ##cprc-loc-ref-0-3 ##degen-loc-ref list-tail ##fl/ ##string-ci>=? ##string->number/keyword/symbol length ##fxwraparithmetic-shift-left? ##subu8vector-move! ##f32vector-fill! ##include-file-as-a-begin-expr ##err-code-ENOENT console-port integer? ##fail-check-char-vector ##port-of-kind? ##cte-lookup ##constant-expression-value ##dot-marker ##vm-main-module-ref ##psettings-options->options fxfirst-bit-set ##thread-execute-and-end! fllog thread? ##repl-cmd-e-ed subs16vector-move! ##bignum.inexact-mdigit-base ##fxmin ##escape-symkey? ##fail-check-service-info scheduler-exception-reason ##frame-fs integer->char map readtable-case-conversion? ##ratnum? ##path->container ##exact-int.div thread-name ##top ##thread-signaled-condvar-action! ##raise-file-exists-exception ##source? ##macro-descr-expander ##wr-ch ##search-module ##fail-check-exact-signed-int8-list ##gen-top ##skip-extended-comment ##close-output-port ##subvector-move! ##os-path-gambitdir ##direct-structure-ref char-ci>? ##fail-check-string-input-port expt ##fixnum-width ##s8vector-set! ##file-info-last-modification-time ##comp-template ##fl>= ##flhypot ##host-define-function-dynamic ##fxabs asinh ##bignum.adigit-inc! ##wr-jazz-set! ##fail-check-string-or-nonnegative-fixnum protocol-info-aliases ##repl-cmd-v-with-1-arg ##initial-current-directory ##make-process-psettings ##thread-heartbeat! serial-number->object tty-history-set! ##hidden-continuation? ##fxif getenv ##u8vector->list ##assq ##proper-list-length u8vector-fill! ##file-info-number-of-links ##process-status ##write-string ##subf64vector-move! f64vector-fill! ##subu16vector-move! ##startup-repl-server s16vector-fill! bitwise-andc2 circular-list ##list->u32vector ##protocol-info ##exact ##cpxnum.- ##dynamic-set! f64vector? ##char-alphabetic? ##flsquare ##read-quotation ##u64vector-length ##repl-error-port ##path->container-hook ##standard-pretty-print-formats ##fail-check-keyword list->s8vector ##call-with-output-u8vector-aux ##will? cddadr ##display-thread-group-state ##u8vector-append char? string->uninterned-keyword with-input-from-vector thread-init! ##define-values-names u32vector-set! readtable? with-output-to-vector s8vector-set! flexp ##readtable-setup-for-standard-level! ##s16vector-set! make-rectangular ##bit-set? string>? ##cprc-case-else js#js->foreign syn#syntax-rules-form-transformer ##help-hook ##read-all-as-a-begin-expr-from-path s64vector error-exception-message ##get-output-string ##repl-location-origin-set! ##psettings->output-readtable open-output-process thread-quantum ##make-initial-repl-context ##unchecked-structure-ref ##raise-started-thread-exception ##current-directory condition-variable-specific-set! ##u16vector-copy ##thread-sleep! subu64vector subs32vector-move! ##symbol-interned? ##io-condvar-port ##real? ##path-volume-end ##exit thread-group->thread-vector uncaught-exception-procedure ##make-condvar ##bignum.adigit-dec! ##fxwrap* ##append-lists mutex-unlock! bytevector? ##atanh ##bignum.adigit-= ##cprc-loc-ref-1-2 ##read-all-as-a-begin-expr-from-port ##repl-channel-really-exit? unterminated-process-exception? ##bignum? ##make-u32vector file-info-attributes flilogb ##wr-will ##display-thread-state ##u16vector-equal? ##apropos u16vector-shrink! ##os-service-info ##repl-result-history-max-length-set! ##output-port? ##for-each <= ##raise-unterminated-process-exception ##stdio/console-repl-channel ##env-insert! ##host-define-procedure-dynamic ##standard-sharp-bang-table ##path-volume-end-using-dir-sep ##apply-module-alias ##os-copy-file ##tgroup-resume! syn#compile-template ##make-friendly-form unbound-serial-number-exception-procedure ##quasi-append ##cprc-quasi-cons cadar ##repl ##fx= ##wr-u8vector syn#ct-list ##min2 s8vector repl-error-port ##mutex-signal-no-reschedule! ##env-lookup ##default-random-source string-ci<=? syn#pattern-pvar? ##read-char0 ##fail-check-byte-output-port ##serial-number-to-object-table ##container->id number->string ##append-s8vectors ##repl-cmd-b-be-bed ##build-delimited-number/keyword/symbol ##device-port-wait-for-input! ##os-device-tty-paren-balance-duration-set! append-strings ##char-to-digit-table ##wrap-op1 ##make-readtable-parameter user-info-shell ##symbol-append ##os-getenv ##module-search-directory? input-port-byte-position f64vector-copy fxquotient ##reverse! ##u32vector-length ##gambdoc ##allow-inner-global-define? ##cte-namespace? output-port-timeout-set! ##comp-top-include ##macro-descr-def-syntax? ##type-all-fields ##degen-top ##inexact append-u32vectors host-info-addresses ##bignum.adigit-bitwise-orc1! ##init-modules ##exact-int.negative? ##floor-remainder ##load-object-file file-inode ##path-strip-volume ##fail-check-thread-state-initialized ##flasinh subs8vector ##vector-shrink! call-with-input-file string->keyword ##make-parameter ##gen-future readtable-comment-handler ##fail-check-abandoned-mutex-exception ##wr-keyword ##cprc-loc-set-box ##s32vector-equal? ##bignum.adigit-bitwise-nor! f32vector-copy ##exception->kind truncate-remainder s32vector ##vector ##cons ##keyword-name-set! ##fail-check-scheduler-exception ##quasi-list file-info ##promise? char-ready? ##parameterize1 ##flonum->string ##cprc-prc-req3 ##procedure? append-f64vectors ##newline1 ##backtrace-default-max-tail-set! ##fail-check-interpreted-procedure ##explode-object ##fail-check-number ##case-conversion-set! ##degen-glo-def ##default-display-exception ##ratnum.- ##s8vector-length ##sourcify-aux2 u16vector-ref ##subprocedure-parent ##append-s16vectors ##thread-call ##list-ref keyword-expected-exception-arguments ##s16vector-set ##cprc-guard ##substring->fifo ##repl-commands-with-1-arg ##wr-indent wrong-number-of-values-exception-code read-all ##gen-prc-rest ##byte-rbuf-fill ##fail-check-vm unbound-key-exception? ##write-char ##repl-result-history-ref ##host-name ##trace-list ##feature-port-fields subu8vector create-link ##handle-interrupt ##fail-check-divide-by-zero-exception output-port-readtable ##vector->list ##u16vector-set! first-bit-set bitwise-eqv ##comp-letrec*-values ##wrap ##cpxnum.= type-exception-arg-id ##char-rbuf-fill ##degen-quasi-optimize ##cpxnum-make make-vector ##even? ##eqv? ##repl-cmd-invalid u16vector-fill! ##void-constant? ##container->id-hook ##degen-app ##wr-filler ##make-jobs ##ieee754-32->flonum bytevector-u8-ref read ##u8vector-length current-second ##file-info-owner ##tty-mode-reset ##repl-debug ##fifo->vector ##os-file-times-set! time? append-reverse! ##module-build-subdir-name ##cons*-aux take ##flonum? ##flnan? ##readtable-char-sharp-handler ##source->parms ##f32vector->list unbound-os-environment-variable-exception? ##condvar-signal-no-reschedule! string-ci>? user-info-home ##global-var-table-foldl ##fail-check-wrong-number-of-arguments-exception ##continuation-unwind-wind ##bitwise-eqv2 ##fail-check-unbound-global-exception ##bignum.adigit-copy! ##string->list ##input-port-char-position os-exception-message any-bits-set? ##vect-port-options flinteger? ##>= truncate make-s32vector ##s16vector? ##memq ##os-device-tty-mode-reset ##flfloor ##exception-procedure-and-arguments ##ratnum-make ##definition-value open-output-string ##fail-check-string-list js#foreign->js ##output-port-char-position not ##repl-channel-ports-display-continuation ##tgroup->thread-vector ##s32vector-length group-info? abandoned-mutex-exception? ##list-sort ##fxeven? ##direct-structure-set ##u8-ready?0 ##gen-prc-req-aux ##truncate-quotient ##casin user-info ##display-locat ##fx- readtable-max-unescaped-char ##raise-uninitialized-thread-exception table->list ##timeout->time user-info? syn#match-fail ##marktable-table-get! ##fail-check-length-mismatch-exception ##tcp-service-tgroup ##repl-context-with-clean-exception-handling ##file-info-inode ##unwrap-datum ##execute-final-wills! ##list ##lookup-registered-module ##fail-check-exact-unsigned-int8-list u16vector-set! output-port-readtable-set! ##repl-context-get-context ##unicode-titlecase-dist ##display-dynamic-environment? ##current-user-interrupt-handler ##continuation-capture-aux ##list->table condition-variable-signal! ##write-char1 ##degen-letrec* cddaar ##default-repl-context-prompt ##fail-check-s64vector ##max-char string-ci=?-hash ##compile-mod ##list-tabulate ##call-with-input-u8vector ##process-tcp-server-psettings ##eval-within delete-file ##repl-channel-display-multiline-message ##implode-gc-hash-table ##will-execute! ##file-info-mode ##comp-cond ##force-output-catching-exceptions current-error-port ##subu32vector ##repl-path-normalize ##make-io-condvar ##get-command-line ##check-namespace ##gsi-option-update drop ##cdrs ##wr-box ##top-cte-add-macro-no-dups! ##load-support-libraries flatanh ##user-name subf64vector-fill! syn#syntax-rules->crules random-source-state-set! memq ##u16vector? wrong-number-of-values-exception? ##port-settings-set! ##symbol? ##file-last-access-and-modification-times-set! current-thread thread-group-parent ##install-module-set! ##make-macro-descr s16vector-set! ##fxremainder unbound-global-exception-variable string-downcase ##wr-oct ##bignum.adigit-bitwise-nand! ##u8vector->object ##s32vector-copy ##cprc-app1-red ##device-port-wait-for-output! ##length ##string-cmp-ci ##cprc-let ##repl-channel-ports-display-monoline-message ##continuation-capture ##foreign? ##cleaning-up? current-directory ##dynamic-let ##raise-os-io-exception initialized-thread-exception? open-output-file ##bignum.arithmetic-shift-into! ##fxpositive? length-mismatch-exception-arguments ##thread-state ##ratnum.= fxwraparithmetic-shift ##fail-check-s32vector-list ##cte-top min ##integer-sqrt append-s64vectors network-info ##cddr ##bignum.fast-gcd-size-set! ##unbegin ##fail-check-tgroup ##flsqrt flexpm1 ##s16vector-shrink! ##generic-hash ##fxwrapabs ##global-var-primitive-ref ##fail-check-unbound-key-exception fxwraparithmetic-shift-left ##display-rte fl/ ##subtyped? thread-group-specific-set! ##shell-program ##user-interrupt! ##os-group-info ##= ##s32vector-set! odd? ##string-ci>? ##macro-lookup ##repl-channel-ask ##extract-parameters ##wr-return ##make-mutex ##degen-letrec ##u16vector-shrink! ##fail-check-f64vector ##bitwise-ior2 ##char-ci<=? s16vector-shrink! ##f64vector-set! ##raise-io-exception file-info-last-modification-time * ##interp-procedure-entry-hook-set! ##btq-insert! abs ##u16vector ##bitwise-orc1 ##raise-unbound-key-exception ##tgroup-suspend! string-map ##comp-top-declare ##unicode-upcase-dist ##structure-length ##ratnum.normalize ##shell-args-numbered s64vector-length s16vector-append ##read-check-labels! member input-port-column ##set-cdr! ##registered-modules ##repl-cmd-s ##unicode-full-foldcase-start ##show-all-continuations? open-directory ##fxwraplogical-shift-right? ##module-search-order-set! ##raise-type-exception readtable-max-unescaped-char-set cos ##infix-variable-binding with-exception-catcher ##gen-let-values js__gxjs-init# ##os-device-process-pid ##s64vector-copy list->u8vector ##implode-object ##os-device-kind s8vector-copy! inexact->exact ##cprc-glo-set ##serial-number->object >= ##vector-ref ##continuation-next ##fail-check-vector-or-settings ##make-meta-info ##fxsquare? tty-history-max-length-set! ##u32vector->list ##thread-locked-mutex-action! ##cte-namespace ##cos ##get-environment-variable flinfinite? thread-base-priority-set! ##comp-case ##s64vector-ref syntax->vector ##os-device-event-queue-open ##degen-letrec-aux string->symbol ##implode-frame ##f64vector-ref ##var-c-name ##fail-check-exact-unsigned-int64-list ##container->path-hook-set! delete-file-or-directory ##fixnum-width-neg ##thread-yield! ##wrap-op1* noncontinuable-exception-reason ##open-u8vector-pipe-generic terminated-thread-exception-procedure ##var-i ##string->utf8 ##add-exit-job! ##toq-insert! ##fail-check-exact-signed-int64-list permission-denied-exception-procedure ##label-marker-fixup-handler-add! ##close-device ##copy-bit-field ##fxwrapquotient ##char-ci<? ##fail-check-started-thread-exception fxnand f32vector-copy! flasinh fx* ##read-line ##list-set! display-continuation-environment ##call-with-input-string u64vector->list ##repl-location-origin ##trace-depth cdaar make-will ##continuation-graft set-box! ##open-u8vector ##gen-case ##string-suffix=? ##cacos continuation-return call-with-output-vector ##fail-check-thread readtable-case-conversion?-set ##continuation-locat ##make-table-aux ##exact? fxandc2 u64vector-copy with-input-from-file ##repl-channel-ports-write-results ##make-f32vector ##nontail-call-for-step flodd? ##os-device-stream-open-process utf8->string ##u32vector-set! syn#syntax-form-transformer readtable-keywords-allowed?-set string-foldcase ##table-length ##acosh ##thread-int! ##repl-channel-ports-read-command ##u64vector-insert emergency-exit ##readtable? ##box? ##fltan keyword-expected-exception-procedure call-with-output-process ##degen-cond-or ##datum-parsing-exception-names-set! ##fxwrap- ##quasi-cons cdaadr ##os-module-whitelist ##thread-start! path-directory ##var-i-name ##primordial-exception-handler-hook ##drop ##make-psettings display-procedure-environment ##zero? list? ##negate ##max2 ##bignum.adigit-bitwise-ior! fxand flsin ##var-lookup ##string-fill! ##make-string-port fxorc2 ##return-fs ##os-path-gambitdir-map-lookup ##comp-ref ##fail-check-u16vector-list ##string-downcase ##cmd-i ##open-output-process ##make-standard-readtable ##c-id-initial? ##container->id-hook-set! create-symbolic-link ##define-type-expansion-show?-set! ##os-rename-file ##structure-display-exception-handler-table ##implode-continuation ##with-input-from-port cadddr ##bignum.* join-timeout-exception-procedure ##cte-macro ##subproblem-apply4 ##expand-source ##comp-guard thread-state-running? ##call-with-output-string-aux ##raise-unknown-keyword-argument-exception-nary ##/2 ##unicode-downcase-dist ##vector-cas! string->list string-shrink! ##modref->path ##parse-psettings! write-u8 ##make-dummy-port ##explode-continuation unterminated-process-exception-procedure file-info-size floor-quotient ##os-load-object-file char-ci>=? ##gen-cst-no-step ##subvector u32vector? ##cmd-st ##escape-link ##fail-check-s16vector divide-by-zero-exception? unknown-keyword-argument-exception? ##gsi-option-uninstall ##cprc-app2-red ##vector-insert ##thread-base-priority-set! car ##bignum.adigit-length ##repl-channel-write-results thread-group-suspend! get-environment-variable ##comp-cst peek-char ##flround ##char-ci>=? ##host-eval-expand jiffies-per-second make-random-source ##bignum.2*min-fixnum ##gen-glo-set ##append-reverse! call-with-output-file ##initial-dynwind u16vector-copy! read-bytevector! fl< ##fxodd? open-event-queue fl+ readtable-start-syntax-set top ##file-info bitwise-merge bitwise-orc1 ##set-car! ##fail-check-string-or-ip-address ##<2 ##repl-cmd-c ##readtable-char-handler list->f64vector ##shell-command-blocking ##wr-set! ##source2-marker ##<= string mailbox-receive-timeout-exception-procedure acos ##print-marker ##open-output-string ##fl* fxmax ##u64vector->list ##flonum->string-host ##structure-indent-set! ##cte-global-macro-name fxzero? ##structure-instance-of? ##object->global-var->identifier s8vector? read-line ##compile-in-new-compilation-ctx ##namespace-separators char-downcase ##directory-files f32vector-set substring-move! fxremainder thread-specific js#plist->jso get-output-vector host-name open-input-process ##gen-case-else ##read-subu8vector ##s64vector-shrink! table-copy f64vector-append ##current-error-port ##repl-context-cont-in-with-no-result-expected? ##load-module ##tgroup->thread-list ##u16vector-ref service-info-aliases ##input-port-readtable ##fllog1p ##fail-check-absrel-time-or-false ##s16vector-delete thread-group-name ##fl> thread-group? unbound-global-exception-rte ##explode-structure ##f32vector-append make-promise ##flonum->inexact-exponential-format path-extension ##fail-check-unbound-serial-number-exception fxwrapabs ##u8vector-insert subs16vector-fill! will-execute! ##open-tcp-server-aux ##source-strip current-output-port ##proper-list-copy ##raise-ill-formed-special-form ##make-params ##container->path cddar ##expand-source-set! ##random-source-make-reals ##assv ##cte-parent-cte-set! char-numeric? uncaught-exception-reason ##fail-check-exact-signed-int8 ##f64vector-fill! ##newline ##exec-stats write-shared ##make-polar subu8vector-fill! ##read-all file-info-number-of-links ##input-port-column ##lookup-module ##repl-cmd-ed ##repl-cmd-st-with-1-arg ##cte-process-declare ##fail-check-unknown-keyword-argument-exception real-part ##fail-check-string-or-settings s16vector-copy bitwise-andc1 ##number? ##file-exists? ##thread-join! truncate-quotient ##fail-check-rpc-remote-error-exception ##cte-frame-i ##call-with-current-continuation ##conjugate get-environment-variables ##caaaar ##fltruncate ##language-specs-set! string-copy! test-bit-field? ##char-ready? ##append2 ##char->integer ##thread-timeout-action! ##read-next-char-expecting ##continuation-return-aux ##primordial-exception-handler ##not s32vector->list ##flonum-expt2 ##process-statistics ##io-condvar-port-set! string>=? ##comp-app ##f32vector? ##raise-terminated-thread-exception readtable-max-write-level ##cprc-app4-red write-string ##raise-module-not-found-exception rationalize ##display-exception-in-context ##fail-check-protocol-info ##extract-language-and-tail flonum? ##cars with-output-to-string ##repl-cmd-be s64vector-set! open-input-bytevector ##repl-context-cont-in-step-handler? open-input-string ##interp-procedure-rte ##fxandc2 ##cprc-loc-ref-1-1 thread-yield! ##make-path-psettings bitwise-nand read-subu8vector ##getenv ##explode-return ##s32vector->list string=?-hash ##flonum->exact ##definition-name s8vector-shrink! ##cte-decl-name list->s32vector ##call-with-values ##u8vector-delete s8vector-ref ##exact-int.< ##decomp f32vector-length ##fail-check-fixnum acosh ##caddr ##interp-procedure-code ##fail-check-module-not-found-exception ##degen-app3 ##number->string ##append-strings ##cmd-e positive? fxwrap- display-continuation-backtrace cdddr file-number-of-links char-ci<=? ##subprocedure-parent-info fxodd? ##with-input-from-process ##bignum.max-fixnum-div-mdigit-base ##wr-continuation ##escape-keyword? ##subproblem-apply0 ##s32vector-ref ##check-heap ##startup-threading! ##fail-check-continuation path-volume ##make-uninterned-keyword ##string? ##compilation-ctx-demand-modules-add! ##dynamic-wind ##define-type-parser readtable-write-extended-read-macros?-set module-not-found-exception? ##subf64vector random-source-randomize! ##output-port-width ##gen-app-no-step ##repl-cmd-c-s-l-with-1-arg thread-group-resume! os-exception-procedure ##shell-var-binding memv s32vector-fill! ##wrap-op4 ##read-sharp-colon ##fxfirst-bit-set ##cprc-prc js__gxjs-fixes# bitwise-nor ##bignum.min-fixnum-div-mdigit-base divide-by-zero-exception-arguments ##bignum.adigit-zero? u8vector-set ##make-tgroup ##asinh ##random-source-randomize! ##fail-check-u32vector-list u64vector-append ##s64vector-append thread-state-running-processor ##wr-gc-hash-table string-ci=? subf64vector-move! append-s16vectors ##gen-quasi-cons ##char-hexadecimal? ##s16vector-insert ##env-insert ##os-module-install-mode u64vector-fill! ##read-sharp-less ##gen-glo-define-values ##read-datum-or-label ##open-string-pipe-generic ##make-s64vector ##cte-lookup-decl ##bitwise-andc2 ##port-device ##comp-top-begin list-sort ##wr-vector-aux2 ##fxsquare ##bitwise-nor ##c-id-subsequent? ##default-get-module ##type-type ##u64vector-delete open-output-bytevector ##exact-int.nth-root create-directory ##fllog string-set caddar ##make-code* ##cprc-prc-req0 ##append-f32vectors cosh ##f32vector-set! ##+ ##make-bindings-values ##repl-cmd-l ##random-source-make-integers ##flcopysign ##cprc-loc-set ##fxarithmetic-shift-right make-table ##first-argument ##flonum-printout ##ratnum.* open-u8vector-pipe clear-bit-field ##call-with-output-file - floor/ ##thread-end! ##psettings->roptions fx>= ##table-for-each input-port-readtable ##atan ##os-host-name list->u64vector ##with-output-to-u8vector-aux ##path-strip-directory ##eq?-hash error join-timeout-exception? ##fxbit-count fxarithmetic-shift ##fxarithmetic-shift ##gen-case-send input-port-bytes-buffered get-output-string ##foreign-address ##os-device-stream-seek ##cdaddr user-name ##call-with-port ##get-output-u8vector ##flilogb ##fail-check-flonum ##path-extension ##continuation-fs ##set-heartbeat-interval! ##subprocedure-source-info system-version ##get-shell-program fx> subs8vector-move! ##define-type-construct-constant ##seconds->time ##subtyped.symbol? ##fail-check-character-input-port ##repl-channel-result-history-add ##degen-quasi-list->vector ##flscalbn ##make-table ##unicode-class ##output-port-column-set! ##interp-continuation-rte ##gen-or ##display-situation ##var-i? ##cte-namespace-prefix ##string->limited-string bytevector-copy! box? mailbox-receive-timeout-exception? ##marktable-lookup! ##wr-opaque ##f64vector? ##atan2 char-whitespace? ##read-sharp-digit u64vector-set ##pretty-print-shifting-allowed?-set! fxif rational? ##fixnum? current-input-port ##type-id range-exception-arguments ##u16vector-insert unbound-global-exception? syn#template-pvar? ##continuation-slot-live? ##close-input-port ##comp-vals u64vector-shrink! range-exception-arg-id list-tabulate js/syntax#js#this readtable-comment-handler-set ##os-create-fifo ##shape ##optimize-single-var-bind-values?-set! readtable-max-write-length-set ##fail-check-character-output-port protocol-info? ##bignum.fdigit-set! ##flmin ##cadar file-info-group cdaddr thread-join! call-with-current-continuation ##readtable-parse-keyword ##u32vector-copy digit-value deadlock-exception? ##flonum-full-precision? ##open-tcp-client expression-parsing-exception? nonprocedure-operator-exception? cddr ##namespace-split ##cvmr bytevector-copy ##u16vector-append ##wr-str ##start-repl-server equal? ##os-configure-command-string-saved ##char>? ##identity ##step-handlers nonempty-input-port-character-buffer-exception-arguments flsinh ##fixnum->flonum-exact? ##vector-length append-f32vectors tty-type-set! ##char<=? js#console.error ##gc-report-set! ##subprocedure-id ##raise-wrong-number-of-values-exception ##degen-quasi-append ##bignum.mdigit-set! open-input-vector ##structure-indent file-owner ##rationalize f64vector-set make-parameter ##device-condvar-broadcast-no-reschedule! ##inverse ##char=? ##cprc-cond-or ##show-definition-of ##primitive-lock! ##make-io-condvar-for-writing ##mutable? ##ip-address? ##wr-hex ##s64vector? fxior scheme-report-environment ##fail-check-directory-port random-u8vector ##fail-check-host-info mutex-state ##structure-direct-instance-of? call/cc make-u64vector call-with-input-string path-strip-trailing-directory-separator write-substring uninitialized-thread-exception-arguments ##thread-suspend! thread-state-normally-terminated? ##append-s64vectors syntax->datum ##f32vector-equal? subf64vector ##s8vector? ##real-part ##degen-loc-ref-x-y ##make-source ##start-main ##subprocedure-info ##raise-length-mismatch-exception setenv ##with-no-result-expected-continuation? u8vector-length ##with-output-to-string ##degen-prc-req ##caar ##wr-u64vector ##degen-prc-rest flnumerator fxabs ##fx< call-with-input-vector ##eval-top-set! ##caaddr six.make-array ##flonum->ieee754-64 ##host-function-call ##u8vector ##bignum.- delete-directory ##open-output-vector thread-state ##gen-loc-set unbox subs32vector-fill! ##read-char1 ##wr-stamp file-info-last-access-time ##bignum.fdigit-length ##current-vm-resize ##iota ##exit-cleanup ##debug-modules?-set! ##fail-check-mutable ##last-pair ##fail-check-file-info ##raise-unbound-os-environment-variable-exception ##apply ##wrap-op0 ##unbound? ##s16vector->list ##begin? ##fail-check-user-info ##nan? ##macro-descr-expander-src ##gcd2 ##map ##s8vector-ref cadaar ##allow-length-mismatch?-set! ##os-module-search-order ##make-uninterned-symbol ##script-marker ##unicode-full-foldcase-mapping error-object? ##will-action ##subu64vector ##extend-aliases-from-rpath ##byte-wbuf-drain-no-reset ##expt ##os-bat-extension-string-saved ##flsinh ##raise-no-such-file-or-directory-exception ##string->address-and-port-number ##comp-top-namespace modulo force ##os-system-type-string-saved eqv? ##bignum.adigit-ones? ##char-ci=? ##string-upcase ##flodd? ##s64vector-equal? ##display-parameters ##wr-jazz ##fxceiling-ratio vector thread-priority-boost-set! file-exists-exception-procedure ##self-eval? ##cmd-? ##bignum.adigit-width exact-integer? ##open-directory ##fail-check-time thread-mailbox-next ##fail-check-u8vector-input-port ##f32vector-ref ##vector-inc! ##os-device-tty-history with-input-from-process ##allow-length-mismatch? ##marktable-restore! ##integer-nth-root ##newline0 ##thread-mailbox-extract-and-rewind ##/ vector-copy! ##f64vector-insert ##argument-list-fix-rest-param! fl+* permission-denied-exception? ##sourcify-deep ##fail-check-keyword-expected-exception ##make-root-thread ##append-u8vectors append-vectors list-ref ##write-char2? ##infix-lvalue-access ##repl-cmd-h ##repl-cmd-l-with-1-arg ##raise-wrong-number-of-arguments-exception-nary ##skip-single-line-comment ##os-device-force-output ##repl-commands-with-1-arg-set! exact->inexact ##flatan ##pretty-print ##structure-max-head-set! ##primitive-trylock! subs16vector ##remove-registered-module ##comp-seq-aux > ##cprc-case-send-sub ##tty-history-max-length-set! ##make-bindings s32vector-append ##repl-cmd-t ##promise-state-set! ##structure-display-exception-handler-table-get ##env-flatten ##quotient ##open-dummy ##type-exception-names ##repl-cmd-s-with-1-arg ##decompile ##display-exception ##fx<= host-info? thread-send create-fifo ##s32vector-shrink! ##make-list ##string sinh ##wait-device join-timeout-exception-arguments ##gen-cond-or ##datum-parsing-exception-names ##write-shared random-source-make-f64vectors ##u16vector-fill! bitwise-and ##delete-directory ##os-exe-extension-string-saved ##comp-define ##modref->namespace ##read-char0? ##degen-prc ##cprc-prc-req ##internal-expr-marker ##network-info flceiling ##vector-equal? ##cte-decl condition-variable-specific void ##build-vector ##comp-aux ##list->f64vector ##fail-check-exact-unsigned-int8 ##with-input-from-string caddr ##infix-update-in-place ##backtrace-default-max-tail ##os-device-event-queue-read ##null? truncate/ ##subu64vector-move! thread-receive repl-output-port ##repl-context-restart ##utf8->string-length ##s64vector-delete ##interesting-continuation? ##cadr ##fail-check-procedure ##call-with-input-process ##thread-effective-priority-downgrade! ##meta-info->alist keyword-expected-exception? ##default-help f32vector-append ##cprc-cond-if ##object-to-serial-number-table angle ##cdadr ##raise-permission-denied-exception ##main-stepper ##with-input-from-vector ##cssqs group-info ##cdr ##path-strip-trailing-directory-separator ##get-subprocedure-from-name-and-id ##cprc-or list->u32vector thread-base-priority ##get-current-time! ##exact-int.compare ##cdadar ##subvector->fifo ##deferred-user-interrupt? ##repl-channel-discard-buffered-input ##load-modules ##toq-remove! subf32vector-fill! fxandc1 ##call-with-output-u8vector ##kernel-handlers ##cdar fold-right ##tgroup-terminate! ##implode-procedure-or-return uninitialized-thread-exception-procedure transcript-on ##sourcify ##define-values-vals ##subu8vector->fifo ##bignum.copy ##flacosh ##uninterned-symbol? read-error? ##cond? ##fail-check-thread-state-running ##symbol-table-foldl s16vector-copy! ##wait-output-port ##char-whitespace? ##fail-check-string-output-port output-port-column ##fxeqv u32vector-copy! ##shell-var-bindings ##structure-max-head ##object->serial-number ##char-lower-case? ##expand-source-template ##fail-check-exact-unsigned-int32 ##thread-abandoned-mutex-action! ##constant-expression? ##gen-prc ##os-file-info ##s8vector-fill! ##wr-sn network-info? ##label-marker? table-search ##read-sharp-bang ##feature-file-input nonempty-input-port-character-buffer-exception-procedure ##gensym-counter ##container->path-hook ##load-module-or-file time->seconds ##append-u64vectors syntax->list ##extract-bit-field ##char-octal? thread-priority-boost ##os-create-directory ##bignum.mdigit-length symbol? ##backtrace-default-max-head-set! ##fail-check-exact-unsigned-int32-list fx<= ##wr-foreign ##eval-top ##repl-channel-confirm ##cpxnum->string call-with-input-process ##make-device-port service-info-port-number ##bignum.adigit-bitwise-eqv! ##wr-spaces ##fxnor with-output-to-u8vector ##string>? ##thread-btq-remove! ##fleven? ##s64vector-copy! thread-state-abnormally-terminated? ##thread-restore! ##full-name? ##fail-check-f32vector-list fixnum->flonum length-mismatch-exception-procedure ##list->u16vector ##fail-check-byte-port ##jazz? ##read-single-line-comment ##wr-substr substring-fill! ##wr-vector ##cdaar ##s32vector-delete ##make-thread ##subs8vector ##load-source-if-more-recent-set! ##fail-check-condvar table-for-each ##denominator ##path-strip-extension s64vector-set ##comp-delay thread-specific-set! ##flpositive? ##time->seconds ##readtable-copy ##pretty-print-shifting-allowed? ##comp-begin string->number ##u64vector-ref ##f32vector-set ##display-spaces ##exit-trampoline ##type? ##exp type-exception-procedure ##cprc-app0-sub ##repl-cmd-st ##u16vector->list ##degen-case ##vector-last ##continuation-creator ##make-vector ##gensym ##fail-check-vector-input-port ##degen-up-over s16vector-length ##bignum.mdigit-mul! ##promise-state ##gen-prc-req initialized-thread-exception-arguments ##make-module-var ##read-vector-or-list ##open-output-file ##comp-letrec* ##cprc-glo-def ##u32vector mutex? ##< cdadr ##extract-demand-modules ##s16vector-copy ##u8vector-shrink! ##path-directory-end caaddr ##will-action-set! ##os-shell-command ##cte-frame-vars ##os-device-tty-mode-set! ##cond-expand-build subs8vector-fill! ##csquare ##tcp-service-serve ##variable ##comp-body ##bignum.fft-mul-min-width-set! ##peek-char ##repl-cmd-d ##os-err-code->string ##values ##bignum->fixnum? ##gen-cond-if u16vector ##f64vector-length ##continuation-set! ##display-vars ##fail-check-vector-list fxeven? ##current-exception-handler ##execute-and-clear-jobs! ##eof-object? ##raise-join-timeout-exception ##thread-mailbox-rewind generate-proper-tail-calls ##make-f64vector input-port-char-position ##rename-file ##add-job-at-tail! ##mutex-signal-and-condvar-wait! call-with-values current-readtable ##make-interp-procedure ##make-alias-syntax ##random-source-make-u8vectors ##comp-or rpc-remote-error-exception-procedure ##exit-abruptly ##exact-integer? ##path-reference ##wait-input-port ##install-module ##degen-or ##thread-send ##with-output-to-u8vector no-such-file-or-directory-exception? ##extract-container ##string->uninterned-keyword ##cosh ##call-with-input-file ##enable-interrupts! ##write-with-style ##readtable-char-sharp-handler-set! ##fail-check-object-input-port ##s8vector input-port-characters-buffered ##use-fast-bignum-algorithms? datum-parsing-exception-kind ##boolean? ##namespace-separators-set! ##fl= syn#et char>=? ##make-device-port-from-single-device ##label-marker-enter! ##bit-count ##bignum.adigit-cat! os-exception-arguments flush-output-port ##open-input-file ##current-processor-id thread-group-terminate! sqrt char-upper-case? ##make-locat ##fail-check-wrong-number-of-values-exception ##continuation-ref vector->list ##display-procedure-environment append-u16vectors rpc-remote-error-exception? readtable-eval-allowed?-set ##10^-constants ##open-output-u8vector ##readtable-setup-for-language! ##caaar touch ##open-file-generic-from-psettings ##input-port-characters-buffered ##display-exception-hook fxpositive? ##fail-check-exact-signed-int16-list syn#cp-list ##partial-bit-reverse ##search-module-aux rename-file ##vector-set ##comp-if string-ci<? ##string-ci<=? ##raise-expression-parsing-exception ##memv ##frame-call-display?-set! ##interp-procedure-code-pointers ##absrel-timeout->timeout file-creation-time ##flonum->fixnum ##wr-no-display ##positive? ##with-output-to-vector-aux box random-source-make-reals ##time? u16vector-append ##add-to-tail! ##os-path-homedir remainder ##string->uninterned-symbol ##raise-fixnum-overflow-exception ##list->table-aux textual-port? ##thread-repl-context-get! lcm exact? invalid-utf8-encoding-exception-procedure ##f32vector-insert unterminated-process-exception-arguments ##cdaaar ##read-escaped-string ##bignum.negative? ##procedure-name ##input-port-byte-position ##object->string ##open-string-generic ##raise-keyword-expected-exception-nary ##fxabs? ##path-unresolve-hook-set! ##make-will ##fxmax ##any-bits-set? ##exact-integer-sqrt ##cons* inactive-thread-exception-procedure syn#match-pattern ##path-resolve-hook-set! ##s32vector ##current-output-port ##repl-set! ##filepos-col ##string-substitute ##subs16vector ##digit-to-char-table primordial-exception-handler ##repl-debug-main file-info? ##continuation-frame-set! ##fail-check-list ##wr-procedure ##shell-install-dirs ##fail-check-s16vector-list ##make-internal-expr ##top-cte-process-namespace! fxorc1 ##cmd-y ##comp-internal-expr ##degen-app0 ##thread-mailbox-get! ##s16vector-append range-exception? ##os-device-tty-text-attributes-set! port-io-exception-handler-set! ##current-time-point ##bignum.mdigit-test? ##gen-glo-def ##f64vector ##thread-quantum-set! ##u8vector-set ##implode-return ##system-version bytevector-append s32vector? ##read-expr-from-port ##repl-cmd-unknown wrong-number-of-arguments-exception-arguments ##local->value ##marktable-mark! ##interp-subproblem-continuation? list ##desourcify ##read-none ##bitwise-xor make-string ##s16vector ##readtable-char-delimiter? js#alert ##setup-requirements-and-run ##fx+? flsqrt ##fxand ##or? ##fx>= ##copy-file ##subproblem-apply3 condition-variable? ##interp-procedure-entry-hook subu32vector-fill! file-last-access-and-modification-times-set! ##six-types-set! ##append-reverse subu32vector-move! ##cacosh ##open-string u64vector? noncontinuable-exception? ##sqrt ##max ##exact-int.square flscalbn keyword-hash ##print-aux ##make-u8vector readtable-start-syntax open-u8vector system-version-string call-with-output-u8vector ##take ##add-gc-interrupt-job! ##modulo ##flexp ##setenv ##interp-procedure-wrapper iota subu32vector ##display-locals ##peek-char1? ##get-module-from-file ##make-structure with-output-to-process flcos ##cdaadr ##s8vector-equal? ##thread-deadlock-action! ##utf8->string ##degen-seq ##wr-vector-aux1 terminated-thread-exception-arguments ##current-processor get-output-bytevector will-testator fl* ##bignum.make ##open-input-u8vector ##keyword-counter subu8vector-move! ##read-assoc-string=? ##repl-cmd-b-with-1-arg readtable-write-cdr-read-macros? ##read-sharp-char ##init-gambit-module ##cprc-app-sub ##symbol-name ##os-device-stream-options-set! protocol-info ##write-subu8vector ##apply-with-procedure-check-nary transcript-off ##u64vector-copy! ##repl-first-interesting ##clear-bit-field ##cprc-loc-ref-0-1 ##s32vector-set ##fl- ##bignum.naive-mul-max-width ##read-whitespace ##f64vector-shrink! ##char<? ##six-types list->table ##vector-fill! ##global-var-ref ##repl-cmd-c-s-l exp ##gen-loc-ref-aux continuation? ##fail-check-thread-state-abnormally-terminated ##copy-string-list ##s16vector-equal? ##substring-move! fxeqv ##s64vector-fill! ##comp-and ##fail-check-s32vector ##mutex-signal! ##thread-resume! ##bignum.mdigit-div! ##repl-cmd-h-with-1-arg module-not-found-exception-arguments ##comp-quasiquote ##fail-check-u8vector-list ##eval-module ##fail-check-datum-parsing-exception numerator ##cprc-cst ##with-input-from-u8vector ##os-create-symbolic-link ##fail-check-vector-output-port ##display-var-val-aux fxnot unbound-global-exception-code ##comp-top-define-values list->s16vector ##cpxnum.* fold ##frame-locat-display?-set! ##modref-force-not-hosted user-info-gid step ##cte-parent-cte ##read-six ##list-tail ##source-path flfloor ##cprc-delay processor-id ##time ##show-help exact-integer-sqrt ##object->truncated-string ##flceiling ##macro-descr-size ##keyword-hash ##bignum.propagate-carry-and-normalize! ##u64vector ##fail-check-vector ##cprc-if2 ##fltanh ##fail-check-u64vector-list list-set! ##fail-check-join-timeout-exception ##macro-expand-set! ##append-u32vectors fx- ##fail-check-file-exists-exception timeout->time ##-2 flnan? s64vector-copy ##build-escaped-string-up-to ##s32vector-insert unknown-keyword-argument-exception-arguments ##open-vector-generic input-port? ##locat? ##show-all-continuations?-set! tty-mode-set! ##display-continuation-env ##main-stepper-set! unbound-serial-number-exception-arguments ##cte-decl? unknown-keyword-argument-exception-procedure u32vector-append ##char-ready?0 ##cpxnum./ ##fail-check-u8vector-or-settings ##port-char-buf-len make-f64vector vector-shrink! ##cpxnum-real unbound-serial-number-exception? ##modref->string string->utf8 ##eq? ##read-datum-or-eof ##u8vector-copy ##shell-command-fallback ##quasi-vector ##subu16vector ##wr-string ##tty-history-set! ##keyword? ##fail-check-pair fldenominator ##macro-descr-set! fixnum-overflow-exception? ##marktable-save ##repl-cmd-b-be-bed-e-ed-v-with-1-arg inexact? open-output-vector ##make-s8vector bit-count ##wr-serialize open-file arithmetic-shift thread-mailbox-extract-and-rewind ##cprc-app4-sub ##with-input-from-file tty-history cdddar write-bytevector terminated-thread-exception? ##fxandc1 ##fail-check-absrel-time ##path-normalize ##command-line ##break-list vector-inc! ##string-insert ##fixnum->flonum ##symbol-counter ##cprc-loc-ref-box flabs ##path-volume ##read-string=? ##*2 s8vector->list ##bignum.fdigit-width ##caaadr ceiling ##tty-type-set! ##gen-delay ##table-search ##first-bit-set ##exact-int.= ##display-exception-hook-set! ##comp-let-values symbol->string ##open-all-predefined ##list? ##chartable-set! ##cprc-app-red ##repl-cmd-c-with-1-arg make-polar ##comp-lambda-aux ##register-module-descr! object->u8vector keyword? integer-sqrt vector->string s32vector-ref ##cte-frame? syn#mp ##cprc-and ##continuation-denv get-output-u8vector char=? ##integer? extract-bit-field ##tcp-service-mutex ##escape-symbol? ##list->string ##expand-meta-info ##os-device-stream-open-path ##bignum.adigit-negative? ##path->container-hook-set! copy-bit-field ##fail-check-exact-unsigned-int64 ##with-no-result-expected-toplevel ##s64vector-insert ##program-descr null? ##make-raw-device-port ##read-char1? help-browser ##parameterize-build ##system-stamp ##os-protocol-info ##u8vector-equal? ##register-module-descrs ##load-source-if-more-recent ##bignum.adigit-bitwise-not! ##fail-check-tty-port ##repl-server-addr f64vector-ref ##fail-check-permission-denied-exception vector-cas! assoc ##char? ##frame-slot-live? ##comp-or-aux port-settings-set! ##integer-length ##make-directory-psettings file-size ##fail-check-processor procedure? ##cprc-glo-ref ##bignum.fdigit-ref ##fail-check-deadlock-exception caadar ##cprc-loc-ref-2-1 file-exists-exception-arguments service-info error-exception-parameters thread-group-specific ##procedure->continuation abort ##read ##=2 ##comp-top-define ##continuation-count-frames ##subs16vector-fill! ##bitwise-andc1 ##interp-procedure-default-entry-hook ##file-info-device ##continuation-link ##raise-nonempty-input-port-character-buffer-exception ##cprc-loc-define-values ##fxior mutex-specific-set! ##os-condvar-select! cddddr ##convert-case display-continuation-dynamic-environment u16vector->list ##cprc-prc-req1 ##debug-modules? ##* ##raise-os-exception ##u32vector-append identity ##raise-invalid-utf8-encoding-exception pair? make-bytevector ##list-max-head-set! ##ratnum.+ = caar ##thread-poll-devices! ##fail-check-exact-signed-int16 ##tcp-client-socket-info ##thread-interrupt! ##frame-locat-display? ##inverse-eval-in-env ##fail-check-table ##fail-check-unbound-os-environment-variable-exception ##repl-display-environment? ##get-standard-level ##global-var? ##input-port-timeout-set! ##cte-relink ##read-u8 fxbit-count ##symbol->string ##read-six-datum-or-eof append-s8vectors tcp-service-unregister! log ##cprc-if3 ##module-var-ref list-copy ##truncate ##fail-check-s8vector-list table? fltan ##nontail-call-for-leap ##primitive-unlock! output-port-line ##repl-channel-ports-really-exit? fx= ##make-friendly-call-form ##repl-cmd-y vector-fill! fl>= readtable-write-cdr-read-macros?-set ##read-other ##os-network-info caadr ##infix-lvalue-fetch ##err-code-EAGAIN output-port-byte-position ##step-handler-get-command ##fail-check-u8vector ##subproblem-apply ##procedure-friendly-name ##u64vector-set ##raise-inactive-thread-exception ##degen-quasi-unquote-splicing ##symbol-hash ##wr ##string->keyword ##bignum.adigit-ones ##cadadr input-port-timeout-set! ##fail-check-inexact-real-list ##make-string ##object->encoding ##call-with-output-vector-aux ##repl-context-display-continuation ##apply-global-with-procedure-check-nary ##fail-check-uncaught-exception ##gsi-option-install ##btq-reposition! ##frame-set! fxarithmetic-shift-left ##fail-check-boolean trace fltanh ##path-expand-hook-set! ##repl-location-relative-set! uninterned-keyword? ##frame? ##read-char ##s16vector-ref cpu-time ##r7rs-raise-continuable ##gen-prc-req-no-step gc-report-set! substring service-info? ##fail-check-pair-list table-ref ##path-resolve-hook ##display-continuation-environment ##bitwise-nand ##gen-let started-thread-exception-arguments ##parameter-counter ##object->global-var ##cddaar type-exception-type-id ##current-input-port ##unicode-foldcase-dist make-f32vector current-jiffy ##thread-toq-remove! ##structure floor f32vector open-tcp-client ##carg ##default-path-resolve ##random-source-pseudo-randomize! current-processor unbreak ##file-info-last-change-time ##bignum.adigit-add! ##repl-channel-acquire-ownership! ##no-stepper syn#pvar-id fixnum-overflow-exception-procedure vector-set! ##raise-rpc-remote-error-exception ##s8vector-append ##standard-escaped-char-table ##gen-glo-ref syn#pattern-ellipsis? ##wr-s16vector ##subu32vector-move! read-string ##wr-frame ##values->list ##xcons syn#syntax-case-form-transformer ##flnumerator ##cmd-b service-info-name ##comp-letrec ##list->u64vector ##bignum.fast-gcd-size ##comp-top-seq ##psettings->woptions ##test-bit-field? ##gen-app ##make-u8vector-pipe-port ##cprc-glo-define-values ##bignum.adigit-shrink! ##u8vector-fill! u64vector-ref ##call-with-output-vector ##make-io-condvar-for-reading ##sinh invalid-utf8-encoding-exception-arguments ##subs64vector ##string->symbol u16vector-set ##write ##comp-lambda ##comp-expr ##finite? make-s64vector ##ieee754-64->flonum ##in-new-compilation-ctx ##bignum.naive-mul-max-width-set! ##os-device-tty-history-max-length-set! complex? _gambit# ##comp-future ##build-decimal-integer ##read-sharp-ampersand ##raise-nonprocedure-operator-exception flmin force-output ##flonum->exact-int ##source-code-set! list->f32vector ##gen-cond-send ##random-source-make-f64vectors ##write-char2 ##byte-wbuf-drain ##fail-check-nonempty-input-port-character-buffer-exception bit-set? eof-object ##wrap-op3 ##fail-check-noncontinuable-exception ##bignum.mdigit-base-minus-1 ##ratnum-denominator ##fail-check-expression-parsing-exception ##flatanh ##all-bits-set? conjugate ##string-set ##call-with-input-vector ##assq-cdr ##os-delete-file ##char-upcase ##user-info ##mutex-lock-out-of-line! ##cprc-app0-red ##fail-check-string subu16vector-fill! ##list-copy cdar ##abort ##degen-quasi-unquote-splicing-cdr read-substring ##options-set! pp ##interp-procedure? network-info-name ##power-of-two? ##break ##repl-channel-display-continuation ##gen-cst ##subs32vector-fill! ##repl-channel-result-history-max-length-set! ##last-serial-number ##list-set flexpt ##input-port? ##os-setenv ##global-var->identifier error-object-irritants will? ##read-sharp-aux file-last-access-time ##repl-context-prompt ##raise-mailbox-receive-timeout-exception ##equal? ##comp-top-define-macro table-set! ##fxwraparithmetic-shift? ##os-user-info ##shifted-column vector-append ##wr-s64vector create-temporary-directory ##compilation-ctx-meta-info-add! syn#mp-list s32vector-copy! ##repl-cmd-i ##default-user-interrupt-handler range-exception-procedure ##ratnum./ cons f32vector-shrink! input-port-readtable-set! ##subprocedure-parent-name ##r7rs-with-exception-catcher ##cte-process-namespace ##bignum.adigit-bitwise-and! ##compile-inner ##catanh string-length ##fold s8vector-append ##with-output-to-string-aux ##processed-command-line-set! ##type-field-count ##force ##repl-cmd-qt subu16vector ##bignum.adigit-zeros divide-by-zero-exception-procedure ##fxarithmetic-shift-right? round ##structure-copy wrong-number-of-arguments-exception? ##fail-check-readtable assq ##make-subprocedure ##fail-check-fixnum-overflow-exception ##readtable-foreign-write-handler-register! group-info-name ##fifo->u8vector bitwise-ior ##fxarithmetic-shift? datum->syntax ##with-output-to-file rpc-remote-error-exception-arguments ##path-normalize-directory-existing ##explode-subprocedure expression-parsing-exception-parameters ##cddadr ##argument-list-remove-absent! ##system-version-string ##wr-symbol ##peek-char1 ##eof-object display-dynamic-environment? ##keyword->string ##get-module-set! main ##thread-end-with-uncaught-exception! ##with-exception-handler host-info-name ##read-sharp ##display-thread-state-relative ##explode-promise ##host-decl-expand ##raise-range-exception thread-state-initialized? call-with-input-u8vector ##fx*? ##cte-top? ##fail-check-exact-signed-int32 ##reader->open-close ##scheme-file-extensions ##module-search-order ##path-unresolve-hook ##clear-jobs! ##uninterned-keyword? ##rational? write-char ##read-number/keyword/symbol user-info-name string-for-each ##frame-call-display? ##unknown-procedure-handler-set! mailbox-receive-timeout-exception-arguments display-exception ##output-port-timeout-set! ##path-unresolve real? ##file-info-group ##log ##thread-terminate! tty-paren-balance-duration-set! port? ##char-numeric? ##thread-priority-boost-set! ##table->list ##read-vector s64vector-copy! ##peek-char0? thread-suspend! break ##condvar-signal! ##infix-compound-expand syn#apply-rules reverse ##repl-commands-no-args-set! pretty-print ##closing-parenthesis-for repl-result-history-ref datum-parsing-exception? thread-thread-group append-u8vectors ##fail-check-exact-signed-int32-list ##char-downcase ##step-handler-continuation? vector-set ##gen-and ##f32vector u32vector-length ##make-delay-promise file-exists? ##path-expand-hook features ##boolean=? ##fxarithmetic-shift-left ##force-output readtable-keywords-allowed? ##structure-cas! flround ##car random-real f32vector? ##structure-max-field ##main-readtable char-upcase ##subs32vector ##bignum.adigit-sub! u8vector-shrink! ##fail-check-tls-options open-binary-input-file ##fxnegative? with-input-from-port ##structure-max-field-set! string-ci>=? ##unbreak denominator ##disable-interrupts! ##bignum.fft-mul-max-width-set! ##stdin-port ##fail-check-s64vector-list ##string-foldcase ##s16vector-copy! ##flexpt with-output-to-port with-input-from-u8vector ##skip-comment-done ##read-illegal executable-path scheduler-exception? zero? ##defer-user-interrupts fxwrap+ ##subtyped.flonum? ##open-file ##degen-case-else ##subf32vector-fill! ##type-fields ##fail-check-port wrong-number-of-values-exception-rte f32vector->list u8vector->list fixnum-overflow-exception-arguments mutex-name ##fxxor fltruncate repl-result-history-max-length-set! ##optimize-single-var-bind-values? u64vector-length current-user-interrupt-handler with-input-from-string ##thread-reschedule! ##default-repl-context-command ##remainder ##append-s32vectors current-exception-handler ##quasi-list->vector imag-part make-s8vector ##read-sharp-vector ##unchecked-structure-cas! ##var-c-boxed? readtable-eval-allowed? bitwise-not ##ratnum-numerator ##repl-input-port help ##vector-copy! boolean=? ##readtable-char-handler-set! ##clear-exit-jobs! ##interned-symbols u32vector ##os-environ ##lcm ##thread-save! ##degen-cst write-subu8vector ##make-repl-channel-ports cdaaar thread-mailbox-rewind ##wr-f64vector ##repl-cmd-e-with-1-arg ##gen-if3 flfinite? ##casinh ##wr-mark-begin ##thread-report-scheduler-error! subs64vector-move! ##subf32vector ##repl-within-proc ##degen-if2 fl> fl- js#console.log ##append-u16vectors ##subtyped.vector? ##string-equal? ##service-info ##hidden-local-var? ##global-var-set! ##continuation-parent null-environment ##repl-cmd-e ##f64vector-append ##s8vector->list readtable-write-extended-read-macros? ##write-u8 ##read-all-as-a-begin-expr-from-psettings ##port-io-exception-handler-set! ##flacos ##u32vector? ##fail-check-invalid-utf8-encoding-exception ##proper-length ##fail-check-char-list ##open-predefined ##step-on ##validate-define-module-alias ##thread-mailbox-next-or-receive ##integer->char ##magnitude ##repl-context-command-set! ##trace-generate ##continuation-last ##compilation-ctx-supply-modules-add! ##circular-list ##fxlength exact ##bit-mask ##repl-context-goto-depth ##implode-promise ##bignum.fft-mul-max-width ##string-copy! ##repl-cmd-be-with-1-arg ##subu8vector-fill! user-info-uid make-root-thread ##degen-cond-send ##repl-cmd-q ##write-generic-to-character-port char-ci<? ##acos unbound-os-environment-variable-exception-arguments default-random-source ##flfinite? ##fl< ##u64vector-set! thread-state-waiting-timeout ##with-no-result-expected ##label-marker-tag ##path-directory ##inverse-eval ##repl-path-normalize-hook ##string=?-hash object->serial-number ##append-vectors char<? ##output-port-line-set! ##truncate-remainder ##caadar ##fxarithmetic-shift-left? ##wr-sn* shell-command ##repl-cmd-? ##host-procedure-call ##file-info-creation-time ##u16vector-delete ##input-port-line-set! ##os-device-stream-read ##u32vector-shrink! ##psettings->device-flags s64vector? ##raise ##comp-quote ##fail-check-rational ##continuation-ret flnegative? ##output-port-line ##degen-cond-if ##fail-check-initialized-thread-exception repl-input-port u8vector-copy ##append ##string-copy s32vector-set! ##list->u8vector fllog1p ##frame-link ##wr-meroon ##cprc-app1-sub ##thread-repl-channel-get! ##u8vector-set! ##cprc-future boolean? ##argument-list-remove-absent-keys! ##fail-check-u32vector ##continuation-frame string<? s64vector-fill! ##os-device-directory-read f64vector-set! ##flinfinite? ##set-box! ##output-port-column ##comp-top syn#compile-pattern ##u16vector-length open-output-u8vector file-info-creation-time ##degen-future ##display-var-val ##cte-top-cte-set! binary-port? ##caadr ##error ##gen-loc-ref-no-step ##help ##wrap-op ##default-thread-make-repl-channel object->string ##port-kind u32vector->list ##cprc-loc-ref write ##subu64vector-fill! ##bignum.mdigit-remainder ##host-eval-dynamic ##comp-top* ##make-string-pipe-port ##load-vm ##port-name->container ##table-ref cadadr ##fail-check-settings ##os-device-stream-default-options flcosh ##expression-parsing-exception-names ##fx+ ##host-info ##fxorc2 ##port? ##cte-macro-name ##table-copy load ##shape? ##wr-fits-on-line ##read-dot ##flonum->ieee754-32 ##define-type-expand ##infinite? ##will-testator ##bignum.mdigit-base ##make-random-source-mrg32k3a ##cte-namespace-lookup list->s64vector file-group ##apply-with-procedure-check ##infix-id ##label-marker-reference ##fail-check-exact-integer u32vector-shrink! make-condition-variable ##list-sort! read-u8 ##process-pid call-with-output-string ##vector-set! js__gxjs-rt# ##u16vector-copy! ##delete-file ##shell-command ##degen-app4 ##degen-guard ##repl-channel-release-ownership! apropos make-list ##flasin ##read-list real-time ##degen-app1 ##force-limited-string! caaar datum-parsing-exception-readenv ##repl-client-addr ##fail-check-exact-unsigned-int16-list initialized-thread-exception-procedure ##s64vector->list ##os-host-info fxarithmetic-shift-right ##file-info-type last-pair ##init-mod ##thread-make-repl-channel defer-user-interrupts ##gen-quasi-append fxsquare make-s16vector ##fixnum->bignum ##input-port-readtable-set! ##imag-part ##subproblem-apply2 ##s32vector-copy! ##might-write-differently? floor-remainder error-exception? ##fail-check-object-output-port ##bitwise-ior ##file-info-size ##fail-check-thread-state-waiting ##string<? ##startup-parallelism! ##string-set! ##label-marker-fixup! ##code-locat flatan ##repl-channel-input-port ##repl-within ##gen-quasi-list->vector ##flexpm1 ##continuation-graft-no-winding ##module-build-subdir-path negative? ##stderr-port ##frame-ref ##flonum->exact-exponential-format ##thread-resume-execution! ##flcosh condition-variable-broadcast! ##fail-check-unterminated-process-exception ##fail-check-range-exception ##string=? ##cpu-count output-port-open? ##inexact->exact ##os-device-stream-open-predefined ##subs8vector-move! ##flabs vector-length thread-terminate! ##comp-case-clauses ##r7rs-with-exception-handler ##arithmetic-shift ##cprc-loc-ref-2-2 ##cddar ##fldenominator ##f64vector-copy! type-exception? infinite? ##u32vector-copy! current-time ##step-handler host-info-aliases syn#cp ##fail-check-process-port ##write-bytevector seconds->time expression-parsing-exception-kind u64vector ##bitwise-not ##readenv-relative-filepos ##u32vector-delete ##os-delete-directory vector-ref asin ##square ##fail-check-real ##f64vector-copy ##u8vector-ref ##explode-frame ##wr-one-line-pretty-print ##keyword-name ##wr-meroon-set! ##executable-path ##current-time random-source-pseudo-randomize! ##fxmodulo ##comp-and-aux ##define-type-expansion-show? ##string-or-ip-address? ##f64vector-delete ##make-readenv ##cprc-loc-ref-0-2 ##string-ci=?-hash string-upcase thread-sleep! ##degen-case-send ##namespace-valid? file-info-device ##os-system-version-string-saved ##comp-top-define-macro-or-syntax ##get-output-vector readtable-sharing-allowed? ##continuation-locals ##collect-modules ##create-temporary-directory ##flcos ##subs32vector-move! square ##s8vector-shrink! ##symbol=? random-source? ##open-input-string ##subs64vector-fill! eqv?-hash subs64vector-fill! gensym ##fail-check-device-output-port table-length ##continuation-first-frame fxbit-set? ##display-gc-report ##tty-history ##make-rectangular ##string-prefix=? bytevector-u8-set! ##fxbit-set? tcp-client-peer-socket-info ##inexact? ##search-setup-file ##negative? ##source-code ##fail-check-uninitialized-thread-exception ##tcp-service-update! ##interp-continuation-code ##cpxnum.+ ##ratnum->flonum ##repl-context-restart-pinpointing-continuation ##exit-with-exception ##make-io-condvar-for-event ##gen-loc-ref ##with-output-to-process sin ##form-size ##make-chartable ##comp-top-seq-aux ##string-shrink! ##degen-and ##reverse u32vector-ref ##with-output-to-vector ##make-u8vector-port ##gen-guard-reraise ##subtyped.bignum? atanh ##char-wbuf-drain integer-length fxwrapquotient make-u16vector println ##parse-define-module-alias ##fail-check-thread-state-uninitialized read-char ##repl-cmd-bed ##cprc-app3-red ##list->s32vector ##psettings->input-readtable values fxwrapsquare ##thread-effective-priority-changed! ##fail-check-inactive-thread-exception ##var-c ##read-sharp-keyword/symbol ##os-device-tty-type-set! ##hidden-parameter? call-with-port ##repl-channel-ports-ask string? s8vector-length ##default-repl-path-normalize ##read-script-line ##output-port-byte-position ##port-name fleven? list->string ##main ##psettings->permissions u8vector-ref ##flnegative? ##bignum.adigit-bitwise-andc1! ##string-ci<?2 ##top-cte-process-declare! ##char-ready?1 ##fail-check-finite-real ##cte-add-macro ##wr-escaped-string read-bytevector ##wr-structure ##read-sharp-semicolon ##create-fifo fixnum? ##string-ci=?2 ##open-vector inactive-thread-exception? ##fail-check-error-exception random-f64vector ##run-subprocess ##input-port-column-set! ##path-expand ##btq-abandon! ##file-info-last-access-time ##degen-glo-ref display-exception-in-context ##bignum.adigit-< thread-interrupt! vector? ##raise-initialized-thread-exception ##repl-output-port ##repl-context-return u8-ready? ##csqrt ##truncate/ ##language-specs ##fxwraplogical-shift-right subvector-move! ##digit-value ##compilation-scope ##write-simple ##fx-? ##namespace-separator-index ##os-getpid ##read-sharp-quotation ##bitwise-and random-integer ##repl-channel-output-port ##fxwrap+ ##u64vector-copy ##wait-for-io! ##substring-fill! ##open-u8vector-generic ##table? f64vector-copy! ##cprc-loc-ref-1-3 length-mismatch-exception-arg-id s16vector ##fxwrapsquare eq? ##readenv->locat ##ratnum.round ##cpxnum? ##cprc-seq ##gen-guard ##cte-decl-value bytevector cadr ##extract-procedure-and-arguments nonprocedure-operator-exception-arguments tty? type-exception-arguments ##read-substring ##scheme-file-extensions-set! ##help-browser ##exit-jobs datum-parsing-exception-parameters ##os-user-name ##u64vector-append ##continuation? ##fail-check-network-info ##vector-append ##chartable-copy ##btq-remove! ##thread-boosted-priority-changed! ##tcp-service-register! ##gen-app-aux ##read-bytevector! ##cprc-case ##gen-loc-ref-box js#scm->js ##err-code-EINTR set-cdr! keyword->string ##fifo->string u8vector-copy! ##ill-formed-special-form open-vector-pipe ##thread-continuation-capture ##intr-terminate-handler-set! ##repl-path-normalize-hook-set! ##display-continuation-dynamic-environment ##repl-channel-ports-pinpoint-continuation ##repl-cmd-bed-with-1-arg ##repl-exception-handler-hook ##display-continuation-frame ##host-exec-expand ##wr-f32vector ##os-executable-path ##u32vector-equal? ##bignum.div ##allow-inner-global-define?-set! ##deconstruct-call exit ##degen-quasi-append-aux ##void ##interaction-cte ##cond-expand-features ##allow-multi-var-bindings? display output-port-width ##create-symbolic-link ##cprc-case-send-red ##will-testator-set! ##feature-intr-terminate ##make-frame ##cpxnum-imag s32vector-set ##fail-check-type-exception ##build-cond open-vector u64vector-set! ##string-ci=? caaaar syn#fail? network-info-number ##exact-int.*-expt2 ##cadaar os-exception? ##os-create-link ##explode-procedure file-info-type ##make-s32vector s64vector-append ##values? service-info-protocol ##cte-mutate-top-cte! ##chartable-ref ##comp-seq ##wrap-datum syn#ct ##delete-file-or-directory ##string-append started-thread-exception-procedure ##tcp-service-unregister! file-attributes ##output-port-readtable ##procedure-locat ##filepos->position append-reverse ##case-memv display-environment-set! string->uninterned-symbol ##with-no-result-expected-toplevel-continuation? ##member ##gsi-option-handlers u8vector-append s32vector-length ##module-path-sep ##cprc-prc-req2 ##for-each-interp-procedure process-status ##implode-procedure ##degen-loc-set < tcp-service-register! gcd ##sourcify-aux1 ##source1-marker / ##tail-call? output-port-char-position ##os-device-process-status ##string->utf8-length ##list-max-head ##input-port-line ##global-var-primitive-set! ##with-output-to-port ##explode-closure ##+2 set-car! ##read-sharp-comment subf32vector ##structure-type ##make-continuation even? uncaught-exception-arguments ##raise-heap-overflow-exception ##interp-internal-continuation? ##interp-continuation? fxmodulo string-ref quotient ##fail-check-nonprocedure-operator-exception ##flzero? ##cte-get-top-cte fx< readtable-max-write-level-set ##implode-structure ##reverse-string-split-at ##get-environment-variables ##keyword-hash-set! ##module-search-order-add! ##bignum.mdigit-width thread-group->thread-list network-info-aliases flacosh ##s16vector-length ##cte-macro-descr readtable-max-write-length file-mode subvector fl<= thread-state-normally-terminated-result ##comp-set! string-append ##compilation-ctx-module-aliases-add! permission-denied-exception-arguments append-u64vectors ##fail-check-symbol ##gc-report? readtable-sharing-allowed?-set ##io-condvar? tty-text-attributes-set! ##bitwise-eqv ##comp-inner ##cprc-cond-send-red ##fxnand ##fail-check-input-port eof-object? ##explode-gc-hash-table ##s8vector-delete promise? ##comp-top-define-syntax ##cprc-app2-sub syn#match-success? ##cprc-case-list ##bitwise-merge ##s8vector-set ##comp-simple ##tcp-service-table ##open-string-pipe rpc-remote-error-exception-message ##make-vector-port ##char-ci>? ##default-path-unresolve ##current-vm ##subf64vector-fill! nan? inexact ##keyword-interned? ##subu32vector-fill! tan ##bignum.mdigit-ref f32vector-ref ##read-datum-or-label-or-none-or-dot ##fail-check-box thread-state-uninitialized? ##bignum.mdigit-base*16 ##compile-top group-info-gid ##repl-context-command ##comp-do ##table-find-key ##tgroup->tgroup-list ##readenv-current-filepos thread-group->thread-group-list ##eval-module-set! ##with-exception-catcher continuation-graft ##degen-glo-set ##object->lexical-var->identifier ##cprc-quasi-append ##reciprocal-cache string-fill! ##lcm2 u16vector-copy open-string u32vector-fill! ##help-hook-set! s64vector-shrink! append ##cte-namespace-aliases ##fail-check-random-source ##comp-cond-clauses list-sort! ##symbol-name-set! input-port-open? ##vector? ##last ##path-join ##thread-void-action! flmax ##wr-s32vector ##call-with-output-process ##structure-type-set! ##thread-schedule! ##return? ##cddddr ##fail-check-u8vector-output-port ##exit-with-err-code-no-cleanup ##u8-ready?1 ##flush-input-buffering ##comp-subexpr ##untrace ##numerator ##vector-copy ##fail-check-exact-unsigned-int16 ##wr-char) (##console-port ##host-fn-counter ##backtrace-default-max-head ##main-readtable-set! repl-display-environment? ##primordial-thread ##bignum.minus-mdigit-base ##current-readtable ##bignum.fft-mul-min-width ##get-module ##bignum.fdigit-base ##decomp-dispatch-table bytevector-length ##macro-descr ##bignum.fdigit-mask ##err-code-unimplemented ##macro-expand ##repl-location-relative ##compilation-ctx ##stdout-port ##max-fixnum ##repl-commands-no-args ##bignum.mdigit-width/2 ##continuation-return-no-winding ##thread-trace ##min-fixnum ##err-code-EACCES ##err-code-EEXIST ##unknown-procedure-handler ##generate-proper-tail-calls ##processed-command-line ##standard-named-char-table ##err-code-ENOENT ##vm-main-module-ref ##bignum.inexact-mdigit-base ##fixnum-width ##initial-current-directory ##path->container-hook ##standard-pretty-print-formats ##help-hook ##current-directory bytevector? ##stdio/console-repl-channel ##standard-sharp-bang-table ##repl ##default-random-source ##serial-number-to-object-table ##char-to-digit-table ##allow-inner-global-define? ##repl-commands-with-1-arg ##trace-list ##feature-port-fields ##container->id-hook bytevector-u8-ref ##tcp-service-tgroup ##unicode-titlecase-dist ##display-dynamic-environment? ##current-user-interrupt-handler ##max-char current-error-port ##cleaning-up? current-directory ##shell-program ##macro-lookup ##unicode-upcase-dist ##registered-modules ##unicode-full-foldcase-start ##show-all-continuations? ##fixnum-width-neg ##repl-location-origin ##trace-depth ##primordial-exception-handler-hook ##structure-display-exception-handler-table ##expand-source ##unicode-downcase-dist ##explode-continuation ##bignum.2*min-fixnum ##initial-dynwind ##source2-marker ##namespace-separators ##current-error-port current-output-port ##bignum.max-fixnum-div-mdigit-base ##bignum.min-fixnum-div-mdigit-base ##type-type ##unicode-class bytevector-copy! current-input-port js/syntax#js#this bytevector-copy ##os-configure-command-string-saved ##step-handlers ##structure-indent random-u8vector call/cc ##unicode-full-foldcase-mapping ##os-bat-extension-string-saved ##os-system-type-string-saved ##wr-jazz ##bignum.adigit-width ##allow-length-mismatch? ##type-exception-names ##datum-parsing-exception-names ##os-exe-extension-string-saved ##internal-expr-marker ##backtrace-default-max-tail ##object-to-serial-number-table ##main-stepper ##deferred-user-interrupt? ##structure-max-head ##feature-file-input ##gensym-counter ##container->path-hook ##eval-top ##thread-restore! ##pretty-print-shifting-allowed? ##current-exception-handler generate-proper-tail-calls current-readtable ##install-module ##10^-constants ##display-exception-hook ##interp-procedure-code-pointers ##current-output-port ##digit-to-char-table primordial-exception-handler bytevector-append ##keyword-counter ##apply-with-procedure-check-nary ##bignum.naive-mul-max-width ##six-types ##eval-module ##keyword-hash ##shell-command-fallback ##break-list ##symbol-counter ##bignum.fdigit-width ##tcp-service-mutex ##program-descr help-browser ##load-source-if-more-recent ##debug-modules? make-bytevector ##frame-locat-display? ##repl-display-environment? ##err-code-EAGAIN ##symbol-hash ##wr ##bignum.adigit-ones ##apply-global-with-procedure-check-nary ##path-resolve-hook ##parameter-counter ##current-input-port ##unicode-foldcase-dist ##standard-escaped-char-table ##bignum.fast-gcd-size ##bignum.mdigit-base-minus-1 ##last-serial-number ##repl-context-prompt ##bignum.adigit-zeros display-dynamic-environment? main ##scheme-file-extensions ##module-search-order ##path-unresolve-hook ##frame-call-display? ##path-expand-hook features random-real ##structure-max-field ##main-readtable ##stdin-port ##optimize-single-var-bind-values? current-user-interrupt-handler current-exception-handler ##thread-save! ##bignum.fft-mul-max-width default-random-source ##label-marker-tag ##repl-path-normalize-hook ##wr-meroon ##error ##expression-parsing-exception-names ##bignum.mdigit-base ##thread-make-repl-channel defer-user-interrupts ##continuation-graft-no-winding ##stderr-port ##explode-frame ##define-type-expansion-show? ##os-system-version-string-saved bytevector-u8-set! println ##main random-f64vector ##language-specs ##compilation-scope random-integer bytevector ##help-browser ##exit-jobs ##err-code-EINTR ##interaction-cte ##cond-expand-features ##allow-multi-var-bindings? ##feature-intr-terminate ##gsi-option-handlers ##module-path-sep ##source1-marker ##list-max-head ##bignum.mdigit-width ##gc-report? ##tcp-service-table ##bignum.mdigit-base*16 ##repl-context-command ##reciprocal-cache) #f)

g_char_table = {};

g_glo = {};

g_host_function2scm = function (obj) {
  g_h2s_procedure = function () {
    return g_scm2host_call(obj);
  };


  return g_h2s_procedure;
};


g_ilogb = function (value) {

              var data = new DataView(new ArrayBuffer(8));
              data.setFloat64(0, value);
              var bits = (data.getUint32(0) >>> 20) & 0x7FF;
              if (bits === 0) { // denormal
                  data.setFloat64(0, value * Math.pow(2, 64));
                  bits = ((data.getUint32(0) >>> 20) & 0x7FF) - 64;
              }
              var exponent = bits - 1022;
              return exponent - 1;
             };


g_inttemp1 = 0;

g_inttemp2 = 0;

g_keyword_table = {};

g_ldexp = function (mantissa,exponent) {

              var steps = Math.min(3, Math.ceil(Math.abs(exponent) / 1023));
              var result = mantissa;
              for (var i = 0; i < steps; i++)
                result *= Math.pow(2, Math.floor((exponent + i) / steps));
              return result;
             };


G_ModLinkInfo = function (name,index) {
  this.name = name;
  this.index = index;
};


g_module_count = 0;

g_module_map = {};

g_module_table = null;

g_nargs = 0;

g_peps = {};

g_pollcount = 100;

g_println = function (s) {
  console.log(s);
};


G_ScmObj = function () {
};


g_stack = [];

g_str2codes = function (strng) {

      var codes = [];
      for (var i=0; i < strng.length; i++) {
          codes.push(strng.charCodeAt(i));
      }
      return codes;
};


g_str_hash = function (strng) {
  var h = 18652613;
  var i = 0;
  var leng = strng.length;
  while (i < leng) {
    h = ((h ^ strng.charCodeAt(i)) * 16777619) & 536870911;
    ++i;
  }
  return h;
};


g_symbol_table = {};

G_Absent = function () {
};


G_Bignum = function (digits) {
  this.digits = digits;
};


g_bignum_to_s32 = function (n) {
  var digits = n.digits;
  var nbdig = digits.length;
  var i = nbdig - 1;
  var result = digits[i];
  if (result > 8191) {
    result -= 16384;
  }
  while (i > 0) {
    --i;
    result = result * 16384 + digits[i];
  }
  return result;
};


g_bignum_to_u32 = function (n) {
  var digits = n.digits;
  var nbdig = digits.length;
  var i = nbdig - 1;
  var result = 0;
  while (i >= 0) {
    result = result * 16384 + digits[i];
    --i;
  }
  return result;
};


G_Box = function (val) {
  this.val = val;
};


G_Char = function (code) {
  this.code = code;
};


G_Char.prototype.toString = function () {
  return String.fromCharCode(this.code);
};

G_Continuation = function (frame,denv) {
  this.frame = frame;
  this.denv = denv;
};


G_Cpxnum = function (real,imag) {
  this.real = real;
  this.imag = imag;
};


G_Deleted = function () {
};


G_Eof = function () {
};


G_F32Vector = function (elems) {
  this.elems = elems;
};


G_F64Vector = function (elems) {
  this.elems = elems;
};


G_Flonum = function (val) {
  this.val = val;
};


G_Flonum.prototype.toString = function () {
  return this.val.toString();
};

G_Foreign = function (val,tags) {
  this.val = val;
  this.tags = tags;
};


g_foreign2host = function (obj) {
  return obj.val;
};


G_Frame = function (slots) {
  this.slots = slots;
};


G_Jumpable = function () {
};


G_Jumpable.prototype.jump = function () {};

G_Key = function () {
};


G_Keyword = function (name,hash,interned) {
  this.name = name;
  this.hash = hash;
  this.interned = interned;
};


G_Keyword.prototype.toString = function () {
  return this.name;
};

g_make_vector = function (leng,init) {
  var elems = new Array(leng);

            for (var i=0; i<leng; i++) {
              elems[i] = init;
            }
            return elems;
};


g_module_latest_registered = null;

g_module_registry_init = function (link_info) {
  var n = link_info.length;
  var i = 0;
  g_module_table = new Array(n);
  while (i < n) {
    var info = link_info[i];
    g_module_map[info.name] = info;
    g_module_table[i] = null;
    ++i;
  }
};


G_Optional = function () {
};


G_Pair = function (car,cdr) {
  this.car = car;
  this.cdr = cdr;
};


g_procedure2host = function (obj) {
  procedure = function () {
    var args = Array.prototype.slice.call(arguments);
    return g_host2scm_call(obj,args);
  };

  return procedure;
};


G_Promise = function (state) {
  this.state = state;
};


g_r0 = void 0;

g_r1 = void 0;

g_r2 = void 0;

g_r3 = void 0;

g_r4 = void 0;

G_Ratnum = function (num,den) {
  this.num = num;
  this.den = den;
};


G_Rest = function () {
};


G_S16Vector = function (elems) {
  this.elems = elems;
};


G_S32Vector = function (elems) {
  this.elems = elems;
};


G_S64Vector = function (elems) {
  this.elems = elems;
};


G_S8Vector = function (elems) {
  this.elems = elems;
};


g_sp = -1;

G_ScmString = function (codes) {
  this.codes = codes;
};


G_ScmString.prototype.toString = function () {
  var limit = 32768;
  if (this.codes.length < limit) {
    return String.fromCharCode.apply(null,this.codes);
  } else {
    var chunks = [];
    var i = 0;
    while (i < this.codes.length) {
      chunks.push(String.fromCharCode.apply(null,this.codes.slice(i,i + limit)));
      i += limit;
    }
    return chunks.join("");
  }
};

G_Structure = function (slots) {
  this.slots = slots;
  if (slots[0] === null) {
    this.slots[0] = this;
  }
};


G_Symbol = function (name,hash,interned) {
  this.name = name;
  this.hash = hash;
  this.interned = interned;
};


G_Symbol.prototype.toString = function () {
  return this.name;
};

G_U16Vector = function (elems) {
  this.elems = elems;
};


G_U32Vector = function (elems) {
  this.elems = elems;
};


G_U64Vector = function (elems) {
  this.elems = elems;
};


G_U8Vector = function (elems) {
  this.elems = elems;
};


G_Unbound = function () {
};


G_Unused = function () {
};


G_Values = function (vals) {
  this.vals = vals;
};


G_Will = function (testator,action) {
  this.testator = testator;
  this.action = action;
};


g_absent_obj = new G_Absent();

g_apply2 = function () {
  var arg2 = g_r2;
  var arg1 = g_r1;
  g_nargs = 0;
  while (arg2 instanceof G_Pair) {
    g_stack[++g_sp] = arg2.car;
    arg2 = arg2.cdr;
    ++g_nargs;
  }
  if (g_nargs > 0) {
    if (g_nargs > 1) {
      if (g_nargs > 2) {
        g_r3 = g_stack[g_sp];
        --g_sp;
      }
      g_r2 = g_stack[g_sp];
      --g_sp;
    }
    g_r1 = g_stack[g_sp];
    --g_sp;
  }
  return arg1;
};


g_bignum_from_s32 = function (n) {
  var m = n;
  var nbdig = 0;
  while (m < -4096 || m > 4095) {
    m = m >> 14;
    ++nbdig;
  }
  ++nbdig;
  var digits = new Array(nbdig);
  var i = 0;
  while (i < nbdig) {
    digits[i] = n & 16383;
    n = n >> 14;
    ++i;
  }
  return new G_Bignum(digits);
};


g_bignum_from_u32 = function (n) {
  var m = n;
  var nbdig = 0;
  while (m !== 0) {
    m = m >>> 14;
    ++nbdig;
  }
  if (nbdig === 0) {
    nbdig = 1;
  }
  var digits = new Array(nbdig);
  var i = 0;
  while (i < nbdig) {
    digits[i] = n & 16383;
    n = n >>> 14;
    ++i;
  }
  return new G_Bignum(digits);
};


g_bignum_make = function (n,x,complement) {
  var i = 0;
  var digits = new Array(n);
  var nbdig = x === false ? 0 : x.digits.length;
  var flip = complement ? 16383 : 0;
  if (n < nbdig) {
    nbdig = n;
  }
  while (i < nbdig) {
    digits[i] = x.digits[i] ^ flip;
    ++i;
  }
  if (!(x === false) && x.digits[i - 1] > 8191) {
    flip = flip ^ 16383;
  }
  while (i < n) {
    digits[i] = flip;
    ++i;
  }
  return new G_Bignum(digits);
};


g_build_key_from_stack = function (nb_req_opt,nb_parms,key_descr) {
  var nb_key_args = g_nargs - nb_req_opt;
  var nb_key_parms = nb_parms - nb_req_opt;
  var k = 0;
  var i = 0;
  var key = null;
  var val = null;
  var key_vals = null;
  if (nb_key_args < 0 || (nb_key_args & 1) !== 0) {
    return g_peps["##raise-wrong-number-of-arguments-exception-nary"];
  }
  key_vals = new Array(nb_key_parms);
  while (k < nb_key_parms) {
    key_vals[k] = key_descr[k * 2 + 1];
    ++k;
  }
  k = 0;
  while (k < nb_key_args) {
    val = g_stack[g_sp - k];
    ++k;
    key = g_stack[g_sp - k];
    ++k;
    if (!(key instanceof G_Keyword)) {
      return g_peps["##raise-keyword-expected-exception-nary"];
    }
    i = 0;
    while (i < nb_key_parms) {
      if (key === key_descr[i * 2]) {
        key_vals[i] = val;
        i = nb_key_parms + 1;
      }
      ++i;
    }
    if (i === nb_key_parms) {
      return g_peps["##raise-unknown-keyword-argument-exception-nary"];
    }
  }
  k = 0;
  g_sp += - nb_key_args;
  while (k < nb_key_parms) {
    g_stack[++g_sp] = key_vals[k];
    ++k;
  }
  g_nargs = nb_parms;
  return null;
};


g_build_rest_from_stack = function (nrp) {
  var rest = null;
  if (g_nargs < nrp) {
    return false;
  }
  while (g_nargs > nrp) {
    rest = new G_Pair(g_stack[g_sp],rest);
    --g_sp;
    --g_nargs;
  }
  g_stack[++g_sp] = rest;
  return true;
};


G_Closure = function (slots) {
  this.slots = slots;
};


G_Closure.prototype.__invoke = function () {
  g_r4 = this;
  return this.slots[0];
};

g_continuation_next = function (cont) {
  var frame = cont.frame;
  var denv = cont.denv;
  var ra = frame[0];
  var link = ra.link;
  var next_frame = frame[link];
  if (next_frame === void 0) {
    return false;
  } else {
    return new G_Continuation(next_frame,denv);
  }
};


G_ControlPoint = function (id,parent) {
  this.id = id;
  this.parent = parent;
};


G_ControlPoint.prototype = Object.create(G_Jumpable.prototype);

g_current_processor = new G_Structure([null,null,null,null,null,null,null,null,null,null,null,null,null,null,false,null,null,null,null,null,null]);

g_current_vm = new G_Structure([null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null]);

g_deleted_obj = new G_Deleted();

g_eof_obj = new G_Eof();

g_host2foreign = function (val) {
  return new G_Foreign(val,false);
};


g_hostarray2list = function (arr) {
  var lst = null;
  var i = 0;
  while (i < arr.length) {
    lst = new G_Pair(arr[i],lst);
    ++i;
  }
  return lst;
};


g_key_obj = new G_Key();

g_make_f32vector = function (leng,init) {
  var elems = new Float32Array(leng);

            for (var i=0; i<leng; i++) {
              elems[i] = init;
            }
            return new G_F32Vector(elems);
};


g_make_f64vector = function (leng,init) {
  var elems = new Float64Array(leng);

            for (var i=0; i<leng; i++) {
              elems[i] = init;
            }
            return new G_F64Vector(elems);
};


g_make_interned_char = function (code) {
  var obj = Object.prototype.hasOwnProperty.call(g_char_table,code) ? g_char_table[code] : null;
  if (obj === null) {
    obj = new G_Char(code);
    g_char_table[code] = obj;
  }
  return obj;
};


g_make_interned_keyword = function (name) {
  var obj = Object.prototype.hasOwnProperty.call(g_keyword_table,name) ? g_keyword_table[name] : null;
  if (obj === null) {
    obj = new G_Keyword(name,g_str_hash(name),false);
    obj.interned = true;
    g_keyword_table[name] = obj;
  }
  return obj;
};


g_make_interned_symbol = function (name) {
  var obj = Object.prototype.hasOwnProperty.call(g_symbol_table,name) ? g_symbol_table[name] : null;
  if (obj === null) {
    obj = new G_Symbol(name,g_str_hash(name),false);
    obj.interned = true;
    g_symbol_table[name] = obj;
  }
  return obj;
};


g_make_s16vector = function (leng,init) {
  var elems = new Int16Array(leng);

            for (var i=0; i<leng; i++) {
              elems[i] = init;
            }
            return new G_S16Vector(elems);
};


g_make_s32vector = function (leng,init) {
  var elems = new Int32Array(leng);

            for (var i=0; i<leng; i++) {
              elems[i] = init;
            }
            return new G_S32Vector(elems);
};


g_make_s64vector = function (leng,init) {
  var elems = new Array(leng);

            for (var i=0; i<leng; i++) {
              elems[i] = init;
            }
            return new G_S64Vector(elems);
};


g_make_s8vector = function (leng,init) {
  var elems = new Int8Array(leng);

            for (var i=0; i<leng; i++) {
              elems[i] = init;
            }
            return new G_S8Vector(elems);
};


g_make_string = function (leng,init) {
  var elems = new Array(leng);

            for (var i=0; i<leng; i++) {
              elems[i] = init;
            }
            return new G_ScmString(elems);
};


g_make_structure = function (type,leng) {
  var elems = new Array(leng);

            for (var i=0; i<leng; i++) {
              elems[i] = type;
            }
            return new G_Structure(elems);
};


g_make_u16vector = function (leng,init) {
  var elems = new Uint16Array(leng);

            for (var i=0; i<leng; i++) {
              elems[i] = init;
            }
            return new G_U16Vector(elems);
};


g_make_u32vector = function (leng,init) {
  var elems = new Uint32Array(leng);

            for (var i=0; i<leng; i++) {
              elems[i] = init;
            }
            return new G_U32Vector(elems);
};


g_make_u64vector = function (leng,init) {
  var elems = new Array(leng);

            for (var i=0; i<leng; i++) {
              elems[i] = init;
            }
            return new G_U64Vector(elems);
};


g_make_u8vector = function (leng,init) {
  var elems = new Uint8Array(leng);

            for (var i=0; i<leng; i++) {
              elems[i] = init;
            }
            return new G_U8Vector(elems);
};


g_make_values = function (leng,init) {
  var elems = new Array(leng);

            for (var i=0; i<leng; i++) {
              elems[i] = init;
            }
            return new G_Values(elems);
};


g_optional_obj = new G_Optional();

g_rest_obj = new G_Rest();

g_s32_unbox = function (n) {
  if (typeof n === "number") {
    return n;
  } else {
    return g_bignum_to_s32(n);
  }
};


g_scm2host = function (obj) {
  if (obj === void 0) {
    return obj;
  }
  if (obj === null) {
    return obj;
  }
  if (typeof obj === "boolean") {
    return obj;
  }
  if (typeof obj === "number") {
    return obj;
  }
  if (obj instanceof G_Flonum) {
    return obj.val;
  }
  if (obj instanceof G_ScmString) {
    return obj.toString();
  }
  if (obj instanceof Array) {
    return obj.map( g_scm2host );
  }
  if (obj instanceof G_U8Vector) {
    return obj.elems;
  }
  if (obj instanceof G_U16Vector) {
    return obj.elems;
  }
  if (obj instanceof G_U32Vector) {
    return obj.elems;
  }
  if (obj instanceof G_S8Vector) {
    return obj.elems;
  }
  if (obj instanceof G_S16Vector) {
    return obj.elems;
  }
  if (obj instanceof G_S32Vector) {
    return obj.elems;
  }
  if (obj instanceof G_F32Vector) {
    return obj.elems;
  }
  if (obj instanceof G_F64Vector) {
    return obj.elems;
  }
  if (obj instanceof G_Pair) {
    var jsobj = {};
    var i = 0;
    while (obj instanceof G_Pair) {
      var elem = obj.car;
      if (elem instanceof G_Pair) {
        jsobj[g_scm2host(elem.car)] = g_scm2host(elem.cdr);
      } else {
        jsobj[i] = g_scm2host(elem);
      }
      ++i;
      obj = obj.cdr;
    }
    return jsobj;
  }
  if (obj instanceof G_Structure) {
    throw "scm2host error (cannot convert Structure)";
  }
  if (typeof obj === "function") {
    return g_procedure2host(obj);
  }
  throw "scm2host error";
};


g_trampoline = function (pc) {
  while (pc !== null) {
    pc = pc();
  }
};


g_u32_unbox = function (n) {
  if (typeof n === "number") {
    return n;
  } else {
    return g_bignum_to_u32(n);
  }
};


g_unbound1_obj = new G_Unbound();

g_unbound2_obj = new G_Unbound();

g_underflow = function () {
  var nextf = g_stack[0];
  if (nextf === void 0) {
    return null;
  }
  var frame = nextf;
  var ra = frame[0];
  var fs = ra.fs;
  var link = ra.link;
  g_stack = frame.slice(0,fs + 1);
  g_sp = fs;
  g_stack[0] = frame[link];
  g_stack[link] = g_underflow;
  return ra;
};


g_underflow.id = 0;
g_underflow.parent = null;
g_underflow.fs = 0;
g_underflow.link = 0;

g_unused_obj = new G_Unused();

g_build_key = function (nb_req_opt,nb_parms,key_descr) {
  var error = null;
  if (g_nargs > 0) {
    g_stack[++g_sp] = g_r1;
    if (g_nargs > 1) {
      g_stack[++g_sp] = g_r2;
      if (g_nargs > 2) {
        g_stack[++g_sp] = g_r3;
      }
    }
  }
  error = g_build_key_from_stack(nb_req_opt,nb_parms,key_descr);
  if (g_nargs > 0) {
    if (g_nargs > 1) {
      if (g_nargs > 2) {
        g_r3 = g_stack[g_sp];
        --g_sp;
      }
      g_r2 = g_stack[g_sp];
      --g_sp;
    }
    g_r1 = g_stack[g_sp];
    --g_sp;
  }
  return error;
};


g_build_rest = function (nrp) {
  var ok = false;
  if (g_nargs > 0) {
    g_stack[++g_sp] = g_r1;
    if (g_nargs > 1) {
      g_stack[++g_sp] = g_r2;
      if (g_nargs > 2) {
        g_stack[++g_sp] = g_r3;
      }
    }
  }
  ok = g_build_rest_from_stack(nrp);
  if (ok) {
    g_nargs += 1;
  }
  if (g_nargs > 0) {
    if (g_nargs > 1) {
      if (g_nargs > 2) {
        g_r3 = g_stack[g_sp];
        --g_sp;
      }
      g_r2 = g_stack[g_sp];
      --g_sp;
    }
    g_r1 = g_stack[g_sp];
    --g_sp;
  }
  return ok;
};


g_closure_alloc = function (slots) {
  function g_closure(msg) {
    if (msg === true) {
      return slots;
    }
    g_r4 = g_closure;
    return slots[0];
  }

  return g_closure;
};


g_continuation_graft_no_winding2 = function () {
  var arg2 = g_r2;
  var arg1 = g_r1;
  g_stack[0] = arg1.frame;
  g_current_processor.slots[14].slots[24] = arg1.denv;
  g_sp = 0;
  g_r0 = g_underflow;
  g_nargs = 0;
  return arg2;
};


g_continuation_graft_no_winding3 = function () {
  var arg2 = g_r2;
  var arg1 = g_r1;
  g_stack[0] = arg1.frame;
  g_current_processor.slots[14].slots[24] = arg1.denv;
  g_sp = 0;
  g_r0 = g_underflow;
  g_r1 = g_r3;
  g_nargs = 1;
  return arg2;
};


g_continuation_graft_no_winding4 = function () {
  var arg2 = g_r1;
  var arg1 = g_stack[g_sp];
  g_stack[0] = arg1.frame;
  g_current_processor.slots[14].slots[24] = arg1.denv;
  g_sp = 0;
  g_r0 = g_underflow;
  g_r1 = g_r2;
  g_r2 = g_r3;
  g_nargs = 2;
  return arg2;
};


g_continuation_graft_no_winding5 = function () {
  var arg2 = g_stack[g_sp];
  var arg1 = g_stack[g_sp-1];
  g_stack[0] = arg1.frame;
  g_current_processor.slots[14].slots[24] = arg1.denv;
  g_sp = 0;
  g_r0 = g_underflow;
  g_nargs = 3;
  return arg2;
};


g_continuation_return_no_winding2 = function () {
  var arg1 = g_r1;
  g_stack[0] = arg1.frame;
  g_current_processor.slots[14].slots[24] = arg1.denv;
  g_sp = 0;
  g_r0 = g_underflow;
  g_r1 = g_r2;
  return g_underflow;
};


G_EntryPoint = function (id,parent,nfree) {
  this.id = id;
  this.parent = parent;
  this.nfree = nfree;
};


G_EntryPoint.prototype = Object.create(G_ControlPoint.prototype);

g_host2scm = function (obj) {
  if (obj === void 0) {
    return void 0;
  }
  if (obj === null) {
    return null;
  }
  if (typeof obj === "boolean") {
    return obj;
  }
  if (typeof obj === "number") {
    if ((obj | 0) === obj && obj >= -536870912 && obj <= 536870911) {
      return obj;
    } else {
      return new G_Flonum(obj);
    }
  }
  if (typeof obj === "function") {
    return g_host_function2scm(obj);
  }
  if (typeof obj === "string") {
    return new G_ScmString(g_str2codes(obj));
  }
  if (obj instanceof Array) {
    return obj.map( g_host2scm );
  }
  if (obj instanceof Uint8Array) {
    return new G_U8Vector(obj);
  }
  if (obj instanceof Uint16Array) {
    return new G_U16Vector(obj);
  }
  if (obj instanceof Uint32Array) {
    return new G_U32Vector(obj);
  }
  if (obj instanceof Int8Array) {
    return new G_S8Vector(obj);
  }
  if (obj instanceof Int16Array) {
    return new G_S16Vector(obj);
  }
  if (obj instanceof Int32Array) {
    return new G_S32Vector(obj);
  }
  if (obj instanceof Float32Array) {
    return new G_F32Vector(obj);
  }
  if (obj instanceof Float64Array) {
    return new G_F64Vector(obj);
  }
  if (typeof obj === "object") {
    var alist = null;
    for (var key in obj) {
    alist = new G_Pair(new G_Pair(g_host2scm(key),g_host2scm(obj[key])),alist);
    }
    return alist;
  }
  throw "host2scm error";
};


g_make_glo_var = function (sym) {
  if (!Object.prototype.hasOwnProperty.call(g_glo,sym.name)) {
    g_glo[sym.name] = g_unbound1_obj;
    g_peps[sym.name] = null;
  }
  return sym;
};


g_module_register = function (module_descr) {
  var temp = module_descr[0];
  var name = temp[temp.length - 1].name;
  var info = Object.prototype.hasOwnProperty.call(g_module_map,name) ? g_module_map[name] : null;
  g_module_latest_registered = module_descr;
  if (!(info === null || g_module_count === g_module_table.length)) {
    var index = info.index;
    var old = g_module_table[index];
    g_module_table[index] = module_descr;
    if (old === null) {
      ++g_module_count;
      if (g_module_count === g_module_table.length) {
        g_glo["##program-descr"] = [g_module_table,null,false];
        temp = g_module_table[g_module_table.length - 1][0];
        g_glo["##vm-main-module-ref"] = temp[temp.length - 1];
        g_sp = -1;
        g_stack[++g_sp] = void 0;
        g_r0 = g_underflow;
        g_nargs = 0;
        g_trampoline(g_module_table[0][4]);
      }
    }
  }
};


g_poll = function (dest) {
  g_pollcount = 100;
  g_stack.length = g_sp + 1;
  return dest;
};


G_ReturnPoint = function (id,parent,fs,link) {
  this.id = id;
  this.parent = parent;
  this.fs = fs;
  this.link = link;
};


G_ReturnPoint.prototype = Object.create(G_ControlPoint.prototype);

g_s32_box = function (n) {
  if (-536870912 <= n && n <= 536870911) {
    return n;
  } else {
    return g_bignum_from_s32(n);
  }
};


g_scm_call = function (proc,args) {
  g_sp = -1;
  g_stack[++g_sp] = void 0;
  g_nargs = args.length;
  i = 0;
  while (i < g_nargs) {
    g_stack[++g_sp] = args[i];
    ++i;
  }
  if (g_nargs > 0) {
    if (g_nargs > 1) {
      if (g_nargs > 2) {
        g_r3 = g_stack[g_sp];
        --g_sp;
      }
      g_r2 = g_stack[g_sp];
      --g_sp;
    }
    g_r1 = g_stack[g_sp];
    --g_sp;
  }
  g_r0 = g_underflow;
  g_trampoline(proc);
  return g_r1;
};


g_thread_restore2 = function () {
  var arg2 = g_r2;
  var arg1 = g_r1;
  g_current_processor.slots[14] = arg1;
  arg1 = arg1.slots[23];
  g_stack[0] = arg1.frame;
  g_current_processor.slots[14].slots[24] = arg1.denv;
  g_sp = 0;
  g_r0 = g_underflow;
  g_nargs = 0;
  return arg2;
};


g_thread_restore4 = function () {
  var arg2 = g_r1;
  var arg1 = g_stack[g_sp];
  g_current_processor.slots[14] = arg1;
  arg1 = arg1.slots[23];
  g_stack[0] = arg1.frame;
  g_current_processor.slots[14].slots[24] = arg1.denv;
  g_sp = 0;
  g_r0 = g_underflow;
  g_r1 = g_r2;
  g_r2 = g_r3;
  g_nargs = 2;
  return arg2;
};


g_tostr = function (obj) {
  if (obj === false) {
    return "#f";
  } else {
    if (obj === true) {
      return "#t";
    } else {
      if (obj === null) {
        return "";
      } else {
        if (obj === void 0) {
          return "#!void";
        } else {
          if (obj === g_eof_obj) {
            return "#!eof";
          } else {
            if (obj instanceof G_Pair) {
              return g_tostr(obj.car) + g_tostr(obj.cdr);
            } else {
              return obj.toString();
            }
          }
        }
      }
    }
  }
};


g_u32_box = function (n) {
  if (0 <= n && n <= 536870911) {
    return n;
  } else {
    return g_bignum_from_u32(n);
  }
};


g_bb1_println = function () {
  g_println(g_tostr(g_r1));
  g_r1 = void 0;
  return g_r0;
};


g_bb1_println.id = 0;
g_bb1_println.parent = null;
g_bb1_println.nfree = -1;

g_glo["println"] = g_bb1_println;

g_heapify_cont = function (ra) {
  if (g_sp > 0) {
    var fs = ra.fs;
    var link = ra.link;
    var base = g_sp - fs;
    var chain;
    if (base > 0) {
      chain = g_stack.slice(base,base + fs + 1);
      chain[0] = ra;
      g_sp = base;
      var prev_frame = chain;
      var prev_link = link;
      ra = prev_frame[prev_link];
      fs = ra.fs;
      link = ra.link;
      base = g_sp - fs;
      while (base > 0) {
        var frame = g_stack.slice(base,base + fs + 1);
        frame[0] = ra;
        g_sp = base;
        prev_frame[prev_link] = frame;
        prev_frame = frame;
        prev_link = link;
        ra = prev_frame[prev_link];
        fs = ra.fs;
        link = ra.link;
        base = g_sp - fs;
      }
      g_stack[link] = g_stack[0];
      g_stack[0] = ra;
      prev_frame[prev_link] = (g_stack.length = fs + 1 , g_stack);
    } else {
      g_stack[link] = g_stack[0];
      g_stack[0] = ra;
      chain = (g_stack.length = fs + 1 , g_stack);
    }
    g_stack = [chain];
    g_sp = 0;
  }
  return g_underflow;
};


g_host2scm_call = function (proc,args) {
  return g_scm2host(g_scm_call(proc,args.map( g_host2scm )));
};


g_make_closure = function (code,leng) {
  var slots = new Array(leng + 1);
  slots[0] = code;
  return g_closure_alloc(slots);
};


g_make_frame = function (ra) {
  var fs = ra.fs;
  var slots = new Array((fs + 1));
  slots[0] = ra;
  return slots;
};


G_ParentEntryPoint = function (id,parent,nfree,_name,ctrlpts,info) {
  this.id = id;
  this.parent = parent;
  this.nfree = nfree;
  this._name = _name;
  this.ctrlpts = ctrlpts;
  this.info = info;
};


G_ParentEntryPoint.prototype = Object.create(G_EntryPoint.prototype);

g_prepend_arg1 = function (arg1) {
  var i = 0;
  if (g_nargs > 0) {
    g_stack[++g_sp] = g_r1;
    if (g_nargs > 1) {
      g_stack[++g_sp] = g_r2;
      if (g_nargs > 2) {
        g_stack[++g_sp] = g_r3;
      }
    }
  }
  g_stack[++g_sp] = null;
  while (i < g_nargs) {
    g_stack[g_sp - i] = g_stack[g_sp - (i + 1)];
    ++i;
  }
  g_stack[g_sp - i] = arg1;
  ++g_nargs;
  if (g_nargs > 0) {
    if (g_nargs > 1) {
      if (g_nargs > 2) {
        g_r3 = g_stack[g_sp];
        --g_sp;
      }
      g_r2 = g_stack[g_sp];
      --g_sp;
    }
    g_r1 = g_stack[g_sp];
    --g_sp;
  }
};


g_check_procedure = function (dest) {
  if (!(typeof dest === "function")) {
    g_prepend_arg1(dest);
    dest = g_glo["##apply-with-procedure-check-nary"];
  }
  return dest;
};


g_check_procedure_glo = function (dest,gv) {
  if (!(typeof dest === "function")) {
    g_prepend_arg1(gv);
    dest = g_glo["##apply-global-with-procedure-check-nary"];
  }
  return dest;
};


g_continuation_capture1 = function () {
  var arg1 = g_r1;
  g_r0 = g_heapify_cont(g_r0);
  g_r1 = new G_Continuation(g_stack[0],g_current_processor.slots[14].slots[24]);
  g_nargs = 1;
  return arg1();
};


g_continuation_capture2 = function () {
  var arg1 = g_r1;
  g_r0 = g_heapify_cont(g_r0);
  g_r1 = new G_Continuation(g_stack[0],g_current_processor.slots[14].slots[24]);
  g_nargs = 2;
  return arg1();
};


g_continuation_capture3 = function () {
  var arg1 = g_r1;
  g_r0 = g_heapify_cont(g_r0);
  g_r1 = new G_Continuation(g_stack[0],g_current_processor.slots[14].slots[24]);
  g_nargs = 3;
  return arg1();
};


g_continuation_capture4 = function () {
  var arg1 = g_stack[g_sp];
  --g_sp;
  g_r0 = g_heapify_cont(g_r0);
  g_stack[++g_sp] = new G_Continuation(g_stack[0],g_current_processor.slots[14].slots[24]);
  g_nargs = 4;
  return arg1();
};


g_make_subprocedure = function (parent,id) {
  return parent.ctrlpts[id];
};


g_scm2host_call = function (fn) {
  if (g_nargs > 0) {
    g_stack[++g_sp] = g_r1;
    if (g_nargs > 1) {
      g_stack[++g_sp] = g_r2;
      if (g_nargs > 2) {
        g_stack[++g_sp] = g_r3;
      }
    }
  }
  var args = g_stack.slice(g_sp + 1 - g_nargs,g_sp + 1 - g_nargs + g_nargs);
  g_sp += - g_nargs;
  var ra = g_heapify_cont(g_r0);
  var frame = g_stack[0];
  var tmp = args.map( g_scm2host );
  tmp = fn.apply( null, tmp );
  g_r1 = g_host2scm(tmp);
  g_sp = -1;
  g_stack[++g_sp] = frame;
  return ra;
};


g_thread_save1 = function () {
  var arg1 = g_r1;
  g_r0 = g_heapify_cont(g_r0);
  g_current_processor.slots[14].slots[23] = new G_Continuation(g_stack[0],g_current_processor.slots[14].slots[24]);
  g_r1 = g_current_processor.slots[14];
  g_nargs = 1;
  return arg1();
};


g_thread_save2 = function () {
  var arg1 = g_r1;
  g_r0 = g_heapify_cont(g_r0);
  g_current_processor.slots[14].slots[23] = new G_Continuation(g_stack[0],g_current_processor.slots[14].slots[24]);
  g_r1 = g_current_processor.slots[14];
  g_nargs = 2;
  return arg1();
};


g_thread_save3 = function () {
  var arg1 = g_r1;
  g_r0 = g_heapify_cont(g_r0);
  g_current_processor.slots[14].slots[23] = new G_Continuation(g_stack[0],g_current_processor.slots[14].slots[24]);
  g_r1 = g_current_processor.slots[14];
  g_nargs = 3;
  return arg1();
};


g_thread_save4 = function () {
  var arg1 = g_stack[g_sp];
  --g_sp;
  g_r0 = g_heapify_cont(g_r0);
  g_current_processor.slots[14].slots[23] = new G_Continuation(g_stack[0],g_current_processor.slots[14].slots[24]);
  g_stack[++g_sp] = g_current_processor.slots[14];
  g_nargs = 4;
  return arg1();
};


g_wrong_key_args = function (proc,exception) {
  g_prepend_arg1(proc);
  return exception;
};


g_wrong_nargs = function (proc) {
  g_prepend_arg1(proc);
  return g_peps["##raise-wrong-number-of-arguments-exception-nary"];
};


g_module_registry_init([new G_ModLinkInfo("_gambit",0),new G_ModLinkInfo("js__gxjs-fixes",1),new G_ModLinkInfo("js__syntax",2),new G_ModLinkInfo("js__gxjs-init",3),new G_ModLinkInfo("js__gxjs-rt",4),new G_ModLinkInfo("js__gxjs-ffi",5)]);

// File generated by Gambit v4.9.3
// Link info: (409003 (js ()) "gxjs-fixes" (("gxjs-fixes")) (module_register glo peps make_interned_symbol r0 r1 ffi wrong_nargs nargs) () (gxjs-fixes#) () #f)

g_module_name = function (module_descr) {
  var temp = module_descr[0];
  var name = temp[temp.length - 1].name;
  return name;
};

g_module_init = function(module_descr) {
  g_sp = -1;
  g_stack[++g_sp] = void 0;
  g_r0 = g_underflow;
  g_nargs = 0;
  g_trampoline(module_descr[4]);
};

gx_gambit_module_table = (typeof gx_old_module_register === 'undefined') ? [] : gx_gambit_module_table;

g_module_register = function (module_descr) {
  // Keep track of all registered modules.
  gx_gambit_module_table.push(module_descr);

  if ( typeof g_glo['##program-descr'] === 'object' ) {
    g_module_init(module_descr);
  } else {
    var temp = module_descr[0];
    var name = temp[temp.length - 1].name;
    var info = Object.prototype.hasOwnProperty.call(g_module_map,name) ? g_module_map[name] : null;
    g_module_latest_registered = module_descr;
    if (!(info === null || g_module_count === g_module_table.length)) {
      var index = info.index;
      var old = g_module_table[index];
      g_module_table[index] = module_descr;
      if (old === null) {
        ++g_module_count;
        if (g_module_count === g_module_table.length) {
          g_glo["##program-descr"] = [g_module_table,null,false];
          temp = g_module_table[g_module_table.length - 1][0];
          g_glo["##vm-main-module-ref"] = temp[temp.length - 1];
          g_sp = -1;
          g_stack[++g_sp] = void 0;
          g_r0 = g_underflow;
          g_nargs = 0;
          g_trampoline(g_module_table[0][4]);
        }
      }
    }
  }
};


g_module_registry_reset = function () {
  g_module_count = 0;
  g_module_map = {};
  g_module_table = null;
  g_module_latest_registered = null;
};

g_module_registry_init = function (link_info) {
  var n = link_info.length;
  var i = 0;
  g_module_registry_reset();
  g_module_table = new Array(n);
  while (i < n) {
    var info = link_info[i];
    g_module_map[info.name] = info;
    g_module_table[i] = null;
    ++i;
  }
};

g_scm2host = function (obj) {
  if (obj === void 0) {
    return obj;
  }
  if (obj === null) {
    return obj;
  }
  if (typeof obj === "boolean") {
    return obj;
  }
  if (typeof obj === "number") {
    return obj;
  }
  // this is what we add
  if (obj instanceof G_Foreign) {
    return g_foreign2host(obj);
  }
  if (obj instanceof G_Flonum) {
    return obj.val;
  }
  if (obj instanceof G_ScmString) {
    return obj.toString();
  }
  if (obj instanceof Array) {
    return obj.map( g_scm2host );
  }
  if (obj instanceof G_U8Vector) {
    return obj.elems;
  }
  if (obj instanceof G_U16Vector) {
    return obj.elems;
  }
  if (obj instanceof G_U32Vector) {
    return obj.elems;
  }
  if (obj instanceof G_S8Vector) {
    return obj.elems;
  }
  if (obj instanceof G_S16Vector) {
    return obj.elems;
  }
  if (obj instanceof G_S32Vector) {
    return obj.elems;
  }
  if (obj instanceof G_F32Vector) {
    return obj.elems;
  }
  if (obj instanceof G_F64Vector) {
    return obj.elems;
  }if (obj instanceof G_Pair) {
    var jsobj = {};
    var i = 0;
    while (obj instanceof G_Pair) {
      var elem = obj.car;
      if (elem instanceof G_Pair) {
        jsobj[g_scm2host(elem.car)] = g_scm2host(elem.cdr);
      } else {
        jsobj[i] = g_scm2host(elem);
      }
      ++i;
      obj = obj.cdr;
    }
    return jsobj;
  }
  if (obj instanceof G_Structure) {
    throw "scm2host error (cannot convert Structure)";
  }
  if (typeof obj === "function") {
    return g_procedure2host(obj);
  }
  throw "scm2host error";
};


g_host2scm = function (obj) {
  if (obj === void 0) {
    return void 0;
  }
  if (obj === null) {
    return null;
  }
  if (typeof obj === "boolean") {
    return obj;
  }
  if (typeof obj === "number") {
    if ((obj | 0) === obj && obj >= -536870912 && obj <= 536870911) {
      return obj;
    } else {
      return new G_Flonum(obj);
    }
  }
  if (typeof obj === "function") {
    return g_host_function2scm(obj);
  }
  if (typeof obj === "string") {
    return new G_ScmString(g_str2codes(obj));
  }
  if (obj instanceof Array) {
    return obj.map( g_host2scm );
  }
  if (obj instanceof Uint8Array) {
    return new G_U8Vector(obj);
  }
  if (obj instanceof Uint16Array) {
    return new G_U16Vector(obj);
  }
  if (obj instanceof Uint32Array) {
    return new G_U32Vector(obj);
  }
  if (obj instanceof Int8Array) {
    return new G_S8Vector(obj);
  }
  if (obj instanceof Int16Array) {
    return new G_S16Vector(obj);
  }
  if (obj instanceof Int32Array) {
    return new G_S32Vector(obj);
  }
  if (obj instanceof Float32Array) {
    return new G_F32Vector(obj);
  }
  if (obj instanceof Float64Array) {
    return new G_F64Vector(obj);
  }
  // Here's the GX difference!
  if (typeof obj === "object") {
    // var alist = null;
    // for (var key in obj) {
    // alist = new G_Pair(new G_Pair(g_host2scm(key),g_host2scm(obj[key])),alist);
    // }
    // return alist;
    return g_host2foreign(obj);
  }
  throw "host2scm error";
};



g_bb1_gxjs_2d_fixes_23_ = function () { // entry-point
  if (g_nargs !== 0) {
    return g_wrong_nargs(g_bb1_gxjs_2d_fixes_23_);
  }
  g_r1 = void 0;
  return g_r0;
};


g_bb1_gxjs_2d_fixes_23_.id = 0;
g_bb1_gxjs_2d_fixes_23_.parent = g_bb1_gxjs_2d_fixes_23_;
g_bb1_gxjs_2d_fixes_23_.nfree = -1;
g_bb1_gxjs_2d_fixes_23_._name = g_make_interned_symbol("gxjs-fixes#");
g_bb1_gxjs_2d_fixes_23_.ctrlpts = null;
g_bb1_gxjs_2d_fixes_23_.info = false;


g_bb1_gxjs_2d_fixes_23_.ctrlpts = [g_bb1_gxjs_2d_fixes_23_];


g_peps["gxjs-fixes#"] = g_bb1_gxjs_2d_fixes_23_;
g_glo["gxjs-fixes#"] = g_bb1_gxjs_2d_fixes_23_;

g_module_register([[g_make_interned_symbol("gxjs-fixes")],[],null,1,g_bb1_gxjs_2d_fixes_23_,false]);

// File generated by Gambit v4.9.3
// Link info: (409003 (js ()) "syntax" (("syntax")) (module_register peps make_interned_symbol r0 glo r1 ffi wrong_nargs nargs) (js/syntax#js#this) (js/syntax#js#this syntax#) (js/syntax#js#this) #f)

g_bb1_syntax_23_ = function () { // entry-point
  if (g_nargs !== 0) {
    return g_wrong_nargs(g_bb1_syntax_23_);
  }
  g_r1 = window;;
  g_glo["js/syntax#js#this"] = g_r1;
  g_r1 = void 0;
  return g_r0;
};


g_bb1_syntax_23_.id = 0;
g_bb1_syntax_23_.parent = g_bb1_syntax_23_;
g_bb1_syntax_23_.nfree = -1;
g_bb1_syntax_23_._name = g_make_interned_symbol("syntax#");
g_bb1_syntax_23_.ctrlpts = null;
g_bb1_syntax_23_.info = false;


g_bb1_syntax_23_.ctrlpts = [g_bb1_syntax_23_];


g_peps["syntax#"] = g_bb1_syntax_23_;
g_glo["syntax#"] = g_bb1_syntax_23_;

g_module_register([[g_make_interned_symbol("syntax")],[],null,1,g_bb1_syntax_23_,false]);

// File generated by Gambit v4.9.3
// Link info: (409003 (js ()) "gxjs-init" (("gxjs-init")) (module_register peps make_interned_symbol r3 glo check_procedure r2 r1 ffi poll pollcount r0 sp stack wrong_nargs nargs) (##program-descr) (##init-gambit-program ##init-gambit-module gxjs-init#) () #f)


g_module_registry_reset = function () {
  g_module_count = 0;
  g_module_map = {};
  g_module_table = null;
  g_module_latest_registered = null;
};

g_module_registry_init = function (link_info) {
  var n = link_info.length;
  var i = 0;
  g_module_registry_reset();
  g_module_table = new Array(n);
  while (i < n) {
    var info = link_info[i];
    g_module_map[info.name] = info;
    g_module_table[i] = null;
    ++i;
  }
};


g_module_name = function (module_descr) {
  var temp = module_descr[0];
  var name = temp[temp.length - 1].name;
  return name;
};

g_module_init = function(module_descr) {
  g_sp = -1;
  g_stack[++g_sp] = void 0;
  g_r0 = g_underflow;
  g_nargs = 0;
  g_trampoline(module_descr[4]);
};

gx_gambit_module_table = (typeof gx_old_module_register === 'undefined') ? [] : gx_gambit_module_table;

g_module_register = function (module_descr) {
  // Keep track of all registered modules.
  gx_gambit_module_table.push(module_descr);

  if ( typeof g_glo['##program-descr'] === 'object' ) {
    g_module_init(module_descr);
  } else {
    var temp = module_descr[0];
    var name = temp[temp.length - 1].name;
    var info = Object.prototype.hasOwnProperty.call(g_module_map,name) ? g_module_map[name] : null;
    g_module_latest_registered = module_descr;
    if (!(info === null || g_module_count === g_module_table.length)) {
      var index = info.index;
      var old = g_module_table[index];
      g_module_table[index] = module_descr;
      if (old === null) {
        ++g_module_count;
        if (g_module_count === g_module_table.length) {
          g_glo["##program-descr"] = [g_module_table,null,false];
          temp = g_module_table[g_module_table.length - 1][0];
          g_glo["##vm-main-module-ref"] = temp[temp.length - 1];
          g_sp = -1;
          g_stack[++g_sp] = void 0;
          g_r0 = g_underflow;
          g_nargs = 0;
          g_trampoline(g_module_table[0][4]);
        }
      }
    }
  }
};


g_module_registry_init([new G_ModLinkInfo("gxjs-init",0),new G_ModLinkInfo("gxjs-rt",1),new G_ModLinkInfo("gxjs-ffi",2)]);

g_bb1_gxjs_2d_init_23_ = function () { // entry-point
  if (g_nargs !== 0) {
    return g_wrong_nargs(g_bb1_gxjs_2d_init_23_);
  }
  g_stack[g_sp+1] = g_r0;
  ++g_sp;
  if (--g_pollcount === 0) {
    return g_poll(g_bb2_gxjs_2d_init_23_);
  } else {
    g_r0 = g_bb3_gxjs_2d_init_23_;
    g_nargs = 0;
    return g_bb1__23__23_init_2d_gambit_2d_program();
  }
};


g_bb1_gxjs_2d_init_23_.id = 0;
g_bb1_gxjs_2d_init_23_.parent = g_bb1_gxjs_2d_init_23_;
g_bb1_gxjs_2d_init_23_.nfree = -1;
g_bb1_gxjs_2d_init_23_._name = g_make_interned_symbol("gxjs-init#");
g_bb1_gxjs_2d_init_23_.ctrlpts = null;
g_bb1_gxjs_2d_init_23_.info = false;

g_bb2_gxjs_2d_init_23_ = function () {
  g_r0 = g_bb3_gxjs_2d_init_23_;
  g_nargs = 0;
  return g_bb1__23__23_init_2d_gambit_2d_program();
};


g_bb2_gxjs_2d_init_23_.id = 1;
g_bb2_gxjs_2d_init_23_.parent = g_bb1_gxjs_2d_init_23_;

g_bb3_gxjs_2d_init_23_ = function () { // return-point
  g_r1 = void 0;
  --g_sp;
  return g_stack[g_sp+1]();
};


g_bb3_gxjs_2d_init_23_.id = 2;
g_bb3_gxjs_2d_init_23_.parent = g_bb1_gxjs_2d_init_23_;
g_bb3_gxjs_2d_init_23_.fs = 1;
g_bb3_gxjs_2d_init_23_.link = 1;


g_bb1_gxjs_2d_init_23_.ctrlpts = [g_bb1_gxjs_2d_init_23_,g_bb2_gxjs_2d_init_23_,g_bb3_gxjs_2d_init_23_];


g_peps["gxjs-init#"] = g_bb1_gxjs_2d_init_23_;
g_glo["gxjs-init#"] = g_bb1_gxjs_2d_init_23_;

g_bb1__23__23_init_2d_gambit_2d_module = function () { // entry-point
  if (g_nargs !== 1) {
    return g_wrong_nargs(g_bb1__23__23_init_2d_gambit_2d_module);
  }
  g_r2 = g_r1[4];
  if (typeof g_r2 === "function") {
    if (--g_pollcount === 0) {
      return g_poll(g_bb3__23__23_init_2d_gambit_2d_module);
    } else {
      g_nargs = 0;
      return g_check_procedure(g_r2);
    }
  } else {
    alert('Cannot find init function in ' + g_module_name(g_r1)); 
    g_r1 = void 0;
    return g_r0;
  }
};


g_bb1__23__23_init_2d_gambit_2d_module.id = 0;
g_bb1__23__23_init_2d_gambit_2d_module.parent = g_bb1__23__23_init_2d_gambit_2d_module;
g_bb1__23__23_init_2d_gambit_2d_module.nfree = -1;
g_bb1__23__23_init_2d_gambit_2d_module._name = g_make_interned_symbol("##init-gambit-module");
g_bb1__23__23_init_2d_gambit_2d_module.ctrlpts = null;
g_bb1__23__23_init_2d_gambit_2d_module.info = false;

g_bb2__23__23_init_2d_gambit_2d_module = function () {
  if (--g_pollcount === 0) {
    return g_poll(g_bb3__23__23_init_2d_gambit_2d_module);
  } else {
    g_nargs = 0;
    return g_check_procedure(g_r2);
  }
};


g_bb2__23__23_init_2d_gambit_2d_module.id = 1;
g_bb2__23__23_init_2d_gambit_2d_module.parent = g_bb1__23__23_init_2d_gambit_2d_module;

g_bb3__23__23_init_2d_gambit_2d_module = function () {
  g_nargs = 0;
  return g_check_procedure(g_r2);
};


g_bb3__23__23_init_2d_gambit_2d_module.id = 2;
g_bb3__23__23_init_2d_gambit_2d_module.parent = g_bb1__23__23_init_2d_gambit_2d_module;

g_bb4__23__23_init_2d_gambit_2d_module = function () {
  alert('Cannot find init function in ' + g_module_name(g_r1)); 
  g_r1 = void 0;
  return g_r0;
};


g_bb4__23__23_init_2d_gambit_2d_module.id = 3;
g_bb4__23__23_init_2d_gambit_2d_module.parent = g_bb1__23__23_init_2d_gambit_2d_module;


g_bb1__23__23_init_2d_gambit_2d_module.ctrlpts = [g_bb1__23__23_init_2d_gambit_2d_module,g_bb2__23__23_init_2d_gambit_2d_module,g_bb3__23__23_init_2d_gambit_2d_module,g_bb4__23__23_init_2d_gambit_2d_module];


g_peps["##init-gambit-module"] = g_bb1__23__23_init_2d_gambit_2d_module;
g_glo["##init-gambit-module"] = g_bb1__23__23_init_2d_gambit_2d_module;

g_bb1__23__23_init_2d_gambit_2d_program = function () { // entry-point
  if (g_nargs !== 0) {
    return g_wrong_nargs(g_bb1__23__23_init_2d_gambit_2d_program);
  }
  // alert('init program time!'); console.log(g_glo['##program-descr'][0].map(g_module_name));
  g_r1 = g_glo["##program-descr"][0];
  g_r2 = 1;
  if (--g_pollcount === 0) {
    return g_poll(g_bb3__23__23_init_2d_gambit_2d_program);
  } else {
    return g_bb3__23__23_init_2d_gambit_2d_program();
  }
};


g_bb1__23__23_init_2d_gambit_2d_program.id = 0;
g_bb1__23__23_init_2d_gambit_2d_program.parent = g_bb1__23__23_init_2d_gambit_2d_program;
g_bb1__23__23_init_2d_gambit_2d_program.nfree = -1;
g_bb1__23__23_init_2d_gambit_2d_program._name = g_make_interned_symbol("##init-gambit-program");
g_bb1__23__23_init_2d_gambit_2d_program.ctrlpts = null;
g_bb1__23__23_init_2d_gambit_2d_program.info = false;

g_bb3__23__23_init_2d_gambit_2d_program = function () {
  g_r3 = g_r1.length;
  if (g_r2 < g_r3) {
    g_r3 = g_r1[g_r2];
    g_stack[g_sp+1] = g_r0;
    g_stack[g_sp+2] = g_r1;
    g_stack[g_sp+3] = g_r2;
    g_r1 = g_r3;
    g_sp += 3;
    if (--g_pollcount === 0) {
      return g_poll(g_bb5__23__23_init_2d_gambit_2d_program);
    } else {
      g_r0 = g_bb2__23__23_init_2d_gambit_2d_program;
      g_nargs = 1;
      return g_bb1__23__23_init_2d_gambit_2d_module();
    }
  } else {
    g_r1 = void 0;
    return g_r0;
  }
};


g_bb3__23__23_init_2d_gambit_2d_program.id = 1;
g_bb3__23__23_init_2d_gambit_2d_program.parent = g_bb1__23__23_init_2d_gambit_2d_program;

g_bb4__23__23_init_2d_gambit_2d_program = function () {
  g_r3 = g_r1[g_r2];
  g_stack[g_sp+1] = g_r0;
  g_stack[g_sp+2] = g_r1;
  g_stack[g_sp+3] = g_r2;
  g_r1 = g_r3;
  g_sp += 3;
  if (--g_pollcount === 0) {
    return g_poll(g_bb5__23__23_init_2d_gambit_2d_program);
  } else {
    g_r0 = g_bb2__23__23_init_2d_gambit_2d_program;
    g_nargs = 1;
    return g_bb1__23__23_init_2d_gambit_2d_module();
  }
};


g_bb4__23__23_init_2d_gambit_2d_program.id = 2;
g_bb4__23__23_init_2d_gambit_2d_program.parent = g_bb1__23__23_init_2d_gambit_2d_program;

g_bb5__23__23_init_2d_gambit_2d_program = function () {
  g_r0 = g_bb2__23__23_init_2d_gambit_2d_program;
  g_nargs = 1;
  return g_bb1__23__23_init_2d_gambit_2d_module();
};


g_bb5__23__23_init_2d_gambit_2d_program.id = 3;
g_bb5__23__23_init_2d_gambit_2d_program.parent = g_bb1__23__23_init_2d_gambit_2d_program;

g_bb2__23__23_init_2d_gambit_2d_program = function () { // return-point
  g_r2 = g_stack[g_sp] + 1;
  g_r1 = g_stack[g_sp-1];
  g_r0 = g_stack[g_sp-2];
  g_sp -= 3;
  if (--g_pollcount === 0) {
    return g_poll(g_bb3__23__23_init_2d_gambit_2d_program);
  } else {
    return g_bb3__23__23_init_2d_gambit_2d_program();
  }
};


g_bb2__23__23_init_2d_gambit_2d_program.id = 4;
g_bb2__23__23_init_2d_gambit_2d_program.parent = g_bb1__23__23_init_2d_gambit_2d_program;
g_bb2__23__23_init_2d_gambit_2d_program.fs = 3;
g_bb2__23__23_init_2d_gambit_2d_program.link = 1;

g_bb6__23__23_init_2d_gambit_2d_program = function () {
  g_r1 = void 0;
  return g_r0;
};


g_bb6__23__23_init_2d_gambit_2d_program.id = 5;
g_bb6__23__23_init_2d_gambit_2d_program.parent = g_bb1__23__23_init_2d_gambit_2d_program;


g_bb1__23__23_init_2d_gambit_2d_program.ctrlpts = [g_bb1__23__23_init_2d_gambit_2d_program,g_bb3__23__23_init_2d_gambit_2d_program,g_bb4__23__23_init_2d_gambit_2d_program,g_bb5__23__23_init_2d_gambit_2d_program,g_bb2__23__23_init_2d_gambit_2d_program,g_bb6__23__23_init_2d_gambit_2d_program];


g_peps["##init-gambit-program"] = g_bb1__23__23_init_2d_gambit_2d_program;
g_glo["##init-gambit-program"] = g_bb1__23__23_init_2d_gambit_2d_program;

g_module_register([[g_make_interned_symbol("gxjs-init")],[],null,1,g_bb1_gxjs_2d_init_23_,false]);

// File generated by Gambit v4.9.3
// Link info: (409003 (js ()) "gxjs-rt" (("gxjs-rt")) (module_register glo make_interned_symbol make_interned_char make_string flonum pair build_rest r4 r3 make_vector poll pollcount inttemp1 inttemp2 peps sp stack ffi string r2 box r0 r1 wrong_nargs nargs) () (##string-append ##list->vector ##error gxjs-rt# ##length) () #f)

g_bb1_gxjs_2d_rt_23_ = function () { // entry-point
  if (g_nargs !== 0) {
    return g_wrong_nargs(g_bb1_gxjs_2d_rt_23_);
  }
  g_r1 = void 0;
  return g_r0;
};


g_bb1_gxjs_2d_rt_23_.id = 0;
g_bb1_gxjs_2d_rt_23_.parent = g_bb1_gxjs_2d_rt_23_;
g_bb1_gxjs_2d_rt_23_.nfree = -1;
g_bb1_gxjs_2d_rt_23_._name = g_make_interned_symbol("gxjs-rt#");
g_bb1_gxjs_2d_rt_23_.ctrlpts = null;
g_bb1_gxjs_2d_rt_23_.info = false;


g_bb1_gxjs_2d_rt_23_.ctrlpts = [g_bb1_gxjs_2d_rt_23_];


g_peps["gxjs-rt#"] = g_bb1_gxjs_2d_rt_23_;
g_glo["gxjs-rt#"] = g_bb1_gxjs_2d_rt_23_;

g_bb1__23__23_error = function () { // entry-point
  if (g_nargs !== 1) {
    return g_wrong_nargs(g_bb1__23__23_error);
  }
  g_r1 = new G_Box(g_r1);
  g_r2 = g_r1.val;
  if (g_r2 instanceof G_ScmString) {
    g_r2 = g_r1.val;
    g_r2 = g_scm2host(g_r2);
    g_r1.val = g_r2;
    return g_bb3__23__23_error();
  } else {
    return g_bb3__23__23_error();
  }
};


g_bb1__23__23_error.id = 0;
g_bb1__23__23_error.parent = g_bb1__23__23_error;
g_bb1__23__23_error.nfree = -1;
g_bb1__23__23_error._name = g_make_interned_symbol("##error");
g_bb1__23__23_error.ctrlpts = null;
g_bb1__23__23_error.info = false;

g_bb2__23__23_error = function () {
  g_r2 = g_r1.val;
  g_r2 = g_scm2host(g_r2);
  g_r1.val = g_r2;
  return g_bb3__23__23_error();
};


g_bb2__23__23_error.id = 1;
g_bb2__23__23_error.parent = g_bb1__23__23_error;

g_bb3__23__23_error = function () {
  g_r1 = g_r1.val;
  _e = (g_r1);
     if (_e instanceof Error) { throw _e } else { throw new Error(_e) };
  g_r1 = void 0;
  return g_r0;
};


g_bb3__23__23_error.id = 2;
g_bb3__23__23_error.parent = g_bb1__23__23_error;


g_bb1__23__23_error.ctrlpts = [g_bb1__23__23_error,g_bb2__23__23_error,g_bb3__23__23_error];


g_peps["##error"] = g_bb1__23__23_error;
g_glo["##error"] = g_bb1__23__23_error;

g_bb1__23__23_length = function () { // entry-point
  if (g_nargs !== 1) {
    return g_wrong_nargs(g_bb1__23__23_length);
  }
  if (g_r1 === null) {
    g_r1 = 0;
    return g_r0;
  } else {
    g_r1 = g_r1.cdr;
    g_stack[g_sp+1] = g_r0;
    g_r0 = g_bb3__23__23_length;
    g_nargs = 1;
    ++g_sp;
    return g_peps["##length"]();
  }
};


g_bb1__23__23_length.id = 0;
g_bb1__23__23_length.parent = g_bb1__23__23_length;
g_bb1__23__23_length.nfree = -1;
g_bb1__23__23_length._name = g_make_interned_symbol("##length");
g_bb1__23__23_length.ctrlpts = null;
g_bb1__23__23_length.info = false;

g_bb8__23__23_length = function () {
  g_r1 = 0;
  return g_r0;
};


g_bb8__23__23_length.id = 1;
g_bb8__23__23_length.parent = g_bb1__23__23_length;

g_bb2__23__23_length = function () {
  g_r1 = g_r1.cdr;
  g_stack[g_sp+1] = g_r0;
  g_r0 = g_bb3__23__23_length;
  g_nargs = 1;
  ++g_sp;
  return g_peps["##length"]();
};


g_bb2__23__23_length.id = 2;
g_bb2__23__23_length.parent = g_bb1__23__23_length;

g_bb3__23__23_length = function () { // return-point
  if (typeof g_r1 === "number") {
    g_r2 = (g_inttemp2 = (g_inttemp1 = 1 + g_r1)<<2>>2) === g_inttemp1 && g_inttemp2;
    if (!(g_r2 === false)) {
      g_r1 = g_r2;
      --g_sp;
      return g_stack[g_sp+1]();
    } else {
      return g_bb5__23__23_length();
    }
  } else {
    return g_bb5__23__23_length();
  }
};


g_bb3__23__23_length.id = 3;
g_bb3__23__23_length.parent = g_bb1__23__23_length;
g_bb3__23__23_length.fs = 1;
g_bb3__23__23_length.link = 1;

g_bb4__23__23_length = function () {
  g_r2 = (g_inttemp2 = (g_inttemp1 = 1 + g_r1)<<2>>2) === g_inttemp1 && g_inttemp2;
  if (!(g_r2 === false)) {
    g_r1 = g_r2;
    --g_sp;
    return g_stack[g_sp+1]();
  } else {
    return g_bb5__23__23_length();
  }
};


g_bb4__23__23_length.id = 4;
g_bb4__23__23_length.parent = g_bb1__23__23_length;

g_bb7__23__23_length = function () {
  g_r1 = g_r2;
  --g_sp;
  return g_stack[g_sp+1]();
};


g_bb7__23__23_length.id = 5;
g_bb7__23__23_length.parent = g_bb1__23__23_length;

g_bb5__23__23_length = function () {
  g_r2 = g_r1;
  g_r1 = 1;
  g_r0 = g_stack[g_sp];
  if (--g_pollcount === 0) {
    return g_poll(g_bb6__23__23_length);
  } else {
    g_nargs = 2;
    --g_sp;
    return g_peps["+"]();
  }
};


g_bb5__23__23_length.id = 6;
g_bb5__23__23_length.parent = g_bb1__23__23_length;

g_bb6__23__23_length = function () {
  g_nargs = 2;
  --g_sp;
  return g_peps["+"]();
};


g_bb6__23__23_length.id = 7;
g_bb6__23__23_length.parent = g_bb1__23__23_length;


g_bb1__23__23_length.ctrlpts = [g_bb1__23__23_length,g_bb8__23__23_length,g_bb2__23__23_length,g_bb3__23__23_length,g_bb4__23__23_length,g_bb7__23__23_length,g_bb5__23__23_length,g_bb6__23__23_length];


g_peps["##length"] = g_bb1__23__23_length;
g_glo["##length"] = g_bb1__23__23_length;

g_bb1__23__23_list_2d__3e_vector = function () { // entry-point
  if (g_nargs !== 1) {
    return g_wrong_nargs(g_bb1__23__23_list_2d__3e_vector);
  }
  g_r2 = new G_Box(void 0);
  g_stack[g_sp+1] = g_r0;
  g_stack[g_sp+2] = g_r1;
  g_stack[g_sp+3] = g_r2;
  g_r0 = g_bb2__23__23_list_2d__3e_vector;
  g_nargs = 1;
  g_sp += 3;
  return g_peps["##length"]();
};


g_bb1__23__23_list_2d__3e_vector.id = 0;
g_bb1__23__23_list_2d__3e_vector.parent = g_bb1__23__23_list_2d__3e_vector;
g_bb1__23__23_list_2d__3e_vector.nfree = -1;
g_bb1__23__23_list_2d__3e_vector._name = g_make_interned_symbol("##list->vector");
g_bb1__23__23_list_2d__3e_vector.ctrlpts = null;
g_bb1__23__23_list_2d__3e_vector.info = false;

g_bb2__23__23_list_2d__3e_vector = function () { // return-point
  g_r1 = g_make_vector(g_r1,0);
  g_stack[g_sp].val = g_r1;
  g_r3 = g_stack[g_sp-1];
  g_r1 = g_stack[g_sp];
  g_r2 = 0;
  g_r0 = g_bb10__23__23_list_2d__3e_vector;
  if (--g_pollcount === 0) {
    return g_poll(g_bb5__23__23_list_2d__3e_vector);
  } else {
    if (g_r3 === null) {
      return g_bb9__23__23_list_2d__3e_vector();
    } else {
      return g_bb6__23__23_list_2d__3e_vector();
    }
  }
};


g_bb2__23__23_list_2d__3e_vector.id = 1;
g_bb2__23__23_list_2d__3e_vector.parent = g_bb1__23__23_list_2d__3e_vector;
g_bb2__23__23_list_2d__3e_vector.fs = 3;
g_bb2__23__23_list_2d__3e_vector.link = 1;

g_bb5__23__23_list_2d__3e_vector = function () {
  if (g_r3 === null) {
    g_r1 = void 0;
    return g_r0;
  } else {
    g_r4 = g_r3.car;
    g_stack[g_sp+1] = g_r1.val;
    g_stack[g_sp+1][g_r2] = g_r4;
    if (typeof g_r2 === "number") {
      ++g_sp;
      g_r4 = (g_inttemp2 = (g_inttemp1 = g_r2 + 1)<<2>>2) === g_inttemp1 && g_inttemp2;
      if (!(g_r4 === false)) {
        return g_bb4__23__23_list_2d__3e_vector();
      } else {
        return g_bb8__23__23_list_2d__3e_vector();
      }
    } else {
      ++g_sp;
      return g_bb8__23__23_list_2d__3e_vector();
    }
  }
};


g_bb5__23__23_list_2d__3e_vector.id = 2;
g_bb5__23__23_list_2d__3e_vector.parent = g_bb1__23__23_list_2d__3e_vector;

g_bb10__23__23_list_2d__3e_vector = function () { // return-point
  g_r1 = g_stack[g_sp].val;
  g_sp -= 3;
  return g_stack[g_sp+1]();
};


g_bb10__23__23_list_2d__3e_vector.id = 3;
g_bb10__23__23_list_2d__3e_vector.parent = g_bb1__23__23_list_2d__3e_vector;
g_bb10__23__23_list_2d__3e_vector.fs = 3;
g_bb10__23__23_list_2d__3e_vector.link = 1;

g_bb9__23__23_list_2d__3e_vector = function () {
  g_r1 = void 0;
  return g_r0;
};


g_bb9__23__23_list_2d__3e_vector.id = 4;
g_bb9__23__23_list_2d__3e_vector.parent = g_bb1__23__23_list_2d__3e_vector;

g_bb6__23__23_list_2d__3e_vector = function () {
  g_r4 = g_r3.car;
  g_stack[g_sp+1] = g_r1.val;
  g_stack[g_sp+1][g_r2] = g_r4;
  if (typeof g_r2 === "number") {
    ++g_sp;
    g_r4 = (g_inttemp2 = (g_inttemp1 = g_r2 + 1)<<2>>2) === g_inttemp1 && g_inttemp2;
    if (!(g_r4 === false)) {
      return g_bb4__23__23_list_2d__3e_vector();
    } else {
      return g_bb8__23__23_list_2d__3e_vector();
    }
  } else {
    ++g_sp;
    return g_bb8__23__23_list_2d__3e_vector();
  }
};


g_bb6__23__23_list_2d__3e_vector.id = 5;
g_bb6__23__23_list_2d__3e_vector.parent = g_bb1__23__23_list_2d__3e_vector;

g_bb7__23__23_list_2d__3e_vector = function () {
  g_r4 = (g_inttemp2 = (g_inttemp1 = g_r2 + 1)<<2>>2) === g_inttemp1 && g_inttemp2;
  if (!(g_r4 === false)) {
    return g_bb4__23__23_list_2d__3e_vector();
  } else {
    return g_bb8__23__23_list_2d__3e_vector();
  }
};


g_bb7__23__23_list_2d__3e_vector.id = 6;
g_bb7__23__23_list_2d__3e_vector.parent = g_bb1__23__23_list_2d__3e_vector;

g_bb4__23__23_list_2d__3e_vector = function () {
  g_r2 = g_r4;
  g_r3 = g_r3.cdr;
  --g_sp;
  if (--g_pollcount === 0) {
    return g_poll(g_bb5__23__23_list_2d__3e_vector);
  } else {
    if (g_r3 === null) {
      return g_bb9__23__23_list_2d__3e_vector();
    } else {
      return g_bb6__23__23_list_2d__3e_vector();
    }
  }
};


g_bb4__23__23_list_2d__3e_vector.id = 7;
g_bb4__23__23_list_2d__3e_vector.parent = g_bb1__23__23_list_2d__3e_vector;

g_bb8__23__23_list_2d__3e_vector = function () {
  g_stack[g_sp] = g_r0;
  g_stack[g_sp+1] = g_r1;
  g_stack[g_sp+2] = g_r3;
  g_r1 = g_r2;
  g_r2 = 1;
  g_r0 = g_bb3__23__23_list_2d__3e_vector;
  g_nargs = 2;
  g_sp += 2;
  return g_peps["+"]();
};


g_bb8__23__23_list_2d__3e_vector.id = 8;
g_bb8__23__23_list_2d__3e_vector.parent = g_bb1__23__23_list_2d__3e_vector;

g_bb3__23__23_list_2d__3e_vector = function () { // return-point
  g_r4 = g_r1;
  g_r3 = g_stack[g_sp];
  g_r1 = g_stack[g_sp-1];
  g_r0 = g_stack[g_sp-2];
  g_sp -= 2;
  return g_bb4__23__23_list_2d__3e_vector();
};


g_bb3__23__23_list_2d__3e_vector.id = 9;
g_bb3__23__23_list_2d__3e_vector.parent = g_bb1__23__23_list_2d__3e_vector;
g_bb3__23__23_list_2d__3e_vector.fs = 3;
g_bb3__23__23_list_2d__3e_vector.link = 1;


g_bb1__23__23_list_2d__3e_vector.ctrlpts = [g_bb1__23__23_list_2d__3e_vector,g_bb2__23__23_list_2d__3e_vector,g_bb5__23__23_list_2d__3e_vector,g_bb10__23__23_list_2d__3e_vector,g_bb9__23__23_list_2d__3e_vector,g_bb6__23__23_list_2d__3e_vector,g_bb7__23__23_list_2d__3e_vector,g_bb4__23__23_list_2d__3e_vector,g_bb8__23__23_list_2d__3e_vector,g_bb3__23__23_list_2d__3e_vector];


g_peps["##list->vector"] = g_bb1__23__23_list_2d__3e_vector;
g_glo["##list->vector"] = g_bb1__23__23_list_2d__3e_vector;

g_bb1__23__23_string_2d_append = function () { // entry-point (+rest)
  if (g_nargs === 0) {
    g_r1 = null;
  } else {
    if (!g_build_rest(0)) {
      return g_wrong_nargs(g_bb1__23__23_string_2d_append);
    }
  }
  if (g_r1 instanceof G_Pair) {
    g_r2 = g_r1.car;
    g_r2 = new G_Box(g_r2);
    if (g_r1 instanceof G_Pair) {
      g_r1 = g_r1.cdr;
      g_stack[g_sp+1] = g_r2;
      g_r2 = g_r1;
      g_r1 = g_stack[g_sp+1];
      if (--g_pollcount === 0) {
        return g_poll(g_bb7__23__23_string_2d_append);
      } else {
        if (g_r2 === null) {
          return g_bb72__23__23_string_2d_append();
        } else {
          return g_bb8__23__23_string_2d_append();
        }
      }
    } else {
      g_stack[g_sp+1] = g_r0;
      g_stack[g_sp+2] = g_r2;
      g_r0 = g_bb74__23__23_string_2d_append;
      g_nargs = 1;
      g_sp += 2;
      return g_peps["cdr"]();
    }
  } else {
    g_stack[g_sp+1] = g_r0;
    g_stack[g_sp+2] = g_r1;
    g_r0 = g_bb74__23__23_string_2d_append;
    g_nargs = 1;
    g_sp += 2;
    return g_peps["car"]();
  }
};


g_bb1__23__23_string_2d_append.id = 0;
g_bb1__23__23_string_2d_append.parent = g_bb1__23__23_string_2d_append;
g_bb1__23__23_string_2d_append.nfree = -1;
g_bb1__23__23_string_2d_append._name = g_make_interned_symbol("##string-append");
g_bb1__23__23_string_2d_append.ctrlpts = null;
g_bb1__23__23_string_2d_append.info = false;

g_bb2__23__23_string_2d_append = function () {
  g_r2 = g_r1.car;
  g_r2 = new G_Box(g_r2);
  if (g_r1 instanceof G_Pair) {
    g_r1 = g_r1.cdr;
    g_stack[g_sp+1] = g_r2;
    g_r2 = g_r1;
    g_r1 = g_stack[g_sp+1];
    if (--g_pollcount === 0) {
      return g_poll(g_bb7__23__23_string_2d_append);
    } else {
      if (g_r2 === null) {
        return g_bb72__23__23_string_2d_append();
      } else {
        return g_bb8__23__23_string_2d_append();
      }
    }
  } else {
    g_stack[g_sp+1] = g_r0;
    g_stack[g_sp+2] = g_r2;
    g_r0 = g_bb74__23__23_string_2d_append;
    g_nargs = 1;
    g_sp += 2;
    return g_peps["cdr"]();
  }
};


g_bb2__23__23_string_2d_append.id = 1;
g_bb2__23__23_string_2d_append.parent = g_bb1__23__23_string_2d_append;

g_bb3__23__23_string_2d_append = function () {
  g_r1 = g_r1.cdr;
  g_stack[g_sp+1] = g_r2;
  g_r2 = g_r1;
  g_r1 = g_stack[g_sp+1];
  if (--g_pollcount === 0) {
    return g_poll(g_bb7__23__23_string_2d_append);
  } else {
    if (g_r2 === null) {
      return g_bb72__23__23_string_2d_append();
    } else {
      return g_bb8__23__23_string_2d_append();
    }
  }
};


g_bb3__23__23_string_2d_append.id = 2;
g_bb3__23__23_string_2d_append.parent = g_bb1__23__23_string_2d_append;

g_bb7__23__23_string_2d_append = function () {
  if (g_r2 === null) {
    g_r1 = g_r1.val;
    return g_r0;
  } else {
    g_stack[g_sp+1] = g_r0;
    g_stack[g_sp+2] = g_r1;
    g_stack[g_sp+3] = g_r2;
    if (g_r2 instanceof G_Pair) {
      g_sp += 3;
      g_r1 = g_r2.car;
      g_r2 = g_r1;
      g_r1 = g_stack[g_sp-1].val;
      g_r0 = g_bb4__23__23_string_2d_append;
      if (--g_pollcount === 0) {
        return g_poll(g_bb11__23__23_string_2d_append);
      } else {
        g_r3 = g_r1.codes.length;
        g_r4 = g_r2.codes.length;
        if (typeof g_r4 === "number") {
          if (typeof g_r3 === "number") {
            g_stack[g_sp+1] = (g_inttemp2 = (g_inttemp1 = g_r3 + g_r4)<<2>>2) === g_inttemp1 && g_inttemp2;
            if (!(g_stack[g_sp+1] === false)) {
              ++g_sp;
              g_r4 = g_stack[g_sp];
              --g_sp;
              return g_bb15__23__23_string_2d_append();
            } else {
              ++g_sp;
              g_stack[g_sp] = g_r0;
              g_stack[g_sp+1] = g_r1;
              g_stack[g_sp+2] = g_r2;
              g_stack[g_sp+3] = g_r3;
              g_r2 = g_r4;
              g_r1 = g_r3;
              g_r0 = g_bb64__23__23_string_2d_append;
              g_nargs = 2;
              g_sp += 3;
              return g_peps["+"]();
            }
          } else {
            if (g_r4 instanceof G_Flonum) {
              return g_bb66__23__23_string_2d_append();
            } else {
              return g_bb68__23__23_string_2d_append();
            }
          }
        } else {
          if (g_r4 instanceof G_Flonum) {
            return g_bb66__23__23_string_2d_append();
          } else {
            return g_bb68__23__23_string_2d_append();
          }
        }
      }
    } else {
      g_sp += 3;
      g_r1 = g_r2;
      g_r0 = g_bb70__23__23_string_2d_append;
      g_nargs = 1;
      return g_peps["car"]();
    }
  }
};


g_bb7__23__23_string_2d_append.id = 3;
g_bb7__23__23_string_2d_append.parent = g_bb1__23__23_string_2d_append;

g_bb72__23__23_string_2d_append = function () {
  g_r1 = g_r1.val;
  return g_r0;
};


g_bb72__23__23_string_2d_append.id = 4;
g_bb72__23__23_string_2d_append.parent = g_bb1__23__23_string_2d_append;

g_bb8__23__23_string_2d_append = function () {
  g_stack[g_sp+1] = g_r0;
  g_stack[g_sp+2] = g_r1;
  g_stack[g_sp+3] = g_r2;
  if (g_r2 instanceof G_Pair) {
    g_sp += 3;
    g_r1 = g_r2.car;
    g_r2 = g_r1;
    g_r1 = g_stack[g_sp-1].val;
    g_r0 = g_bb4__23__23_string_2d_append;
    if (--g_pollcount === 0) {
      return g_poll(g_bb11__23__23_string_2d_append);
    } else {
      g_r3 = g_r1.codes.length;
      g_r4 = g_r2.codes.length;
      if (typeof g_r4 === "number") {
        if (typeof g_r3 === "number") {
          g_stack[g_sp+1] = (g_inttemp2 = (g_inttemp1 = g_r3 + g_r4)<<2>>2) === g_inttemp1 && g_inttemp2;
          if (!(g_stack[g_sp+1] === false)) {
            ++g_sp;
            g_r4 = g_stack[g_sp];
            --g_sp;
            return g_bb15__23__23_string_2d_append();
          } else {
            ++g_sp;
            g_stack[g_sp] = g_r0;
            g_stack[g_sp+1] = g_r1;
            g_stack[g_sp+2] = g_r2;
            g_stack[g_sp+3] = g_r3;
            g_r2 = g_r4;
            g_r1 = g_r3;
            g_r0 = g_bb64__23__23_string_2d_append;
            g_nargs = 2;
            g_sp += 3;
            return g_peps["+"]();
          }
        } else {
          if (g_r4 instanceof G_Flonum) {
            return g_bb66__23__23_string_2d_append();
          } else {
            return g_bb68__23__23_string_2d_append();
          }
        }
      } else {
        if (g_r4 instanceof G_Flonum) {
          return g_bb66__23__23_string_2d_append();
        } else {
          return g_bb68__23__23_string_2d_append();
        }
      }
    }
  } else {
    g_sp += 3;
    g_r1 = g_r2;
    g_r0 = g_bb70__23__23_string_2d_append;
    g_nargs = 1;
    return g_peps["car"]();
  }
};


g_bb8__23__23_string_2d_append.id = 5;
g_bb8__23__23_string_2d_append.parent = g_bb1__23__23_string_2d_append;

g_bb76__23__23_string_2d_append = function () {
  g_stack[g_sp+1] = g_r0;
  g_stack[g_sp+2] = g_r2;
  g_r0 = g_bb74__23__23_string_2d_append;
  g_nargs = 1;
  g_sp += 2;
  return g_peps["cdr"]();
};


g_bb76__23__23_string_2d_append.id = 6;
g_bb76__23__23_string_2d_append.parent = g_bb1__23__23_string_2d_append;

g_bb74__23__23_string_2d_append = function () { // return-point
  return g_bb75__23__23_string_2d_append();
};


g_bb74__23__23_string_2d_append.id = 7;
g_bb74__23__23_string_2d_append.parent = g_bb1__23__23_string_2d_append;
g_bb74__23__23_string_2d_append.fs = 2;
g_bb74__23__23_string_2d_append.link = 1;

g_bb77__23__23_string_2d_append = function () {
  g_stack[g_sp+1] = g_r0;
  g_stack[g_sp+2] = g_r1;
  g_r0 = g_bb74__23__23_string_2d_append;
  g_nargs = 1;
  g_sp += 2;
  return g_peps["car"]();
};


g_bb77__23__23_string_2d_append.id = 8;
g_bb77__23__23_string_2d_append.parent = g_bb1__23__23_string_2d_append;

g_bb9__23__23_string_2d_append = function () {
  g_r1 = g_r2.car;
  g_r2 = g_r1;
  g_r1 = g_stack[g_sp-1].val;
  g_r0 = g_bb4__23__23_string_2d_append;
  if (--g_pollcount === 0) {
    return g_poll(g_bb11__23__23_string_2d_append);
  } else {
    g_r3 = g_r1.codes.length;
    g_r4 = g_r2.codes.length;
    if (typeof g_r4 === "number") {
      if (typeof g_r3 === "number") {
        g_stack[g_sp+1] = (g_inttemp2 = (g_inttemp1 = g_r3 + g_r4)<<2>>2) === g_inttemp1 && g_inttemp2;
        if (!(g_stack[g_sp+1] === false)) {
          ++g_sp;
          g_r4 = g_stack[g_sp];
          --g_sp;
          return g_bb15__23__23_string_2d_append();
        } else {
          ++g_sp;
          g_stack[g_sp] = g_r0;
          g_stack[g_sp+1] = g_r1;
          g_stack[g_sp+2] = g_r2;
          g_stack[g_sp+3] = g_r3;
          g_r2 = g_r4;
          g_r1 = g_r3;
          g_r0 = g_bb64__23__23_string_2d_append;
          g_nargs = 2;
          g_sp += 3;
          return g_peps["+"]();
        }
      } else {
        if (g_r4 instanceof G_Flonum) {
          return g_bb66__23__23_string_2d_append();
        } else {
          return g_bb68__23__23_string_2d_append();
        }
      }
    } else {
      if (g_r4 instanceof G_Flonum) {
        return g_bb66__23__23_string_2d_append();
      } else {
        return g_bb68__23__23_string_2d_append();
      }
    }
  }
};


g_bb9__23__23_string_2d_append.id = 9;
g_bb9__23__23_string_2d_append.parent = g_bb1__23__23_string_2d_append;

g_bb10__23__23_string_2d_append = function () {
  g_r2 = g_r1;
  g_r1 = g_stack[g_sp-1].val;
  g_r0 = g_bb4__23__23_string_2d_append;
  if (--g_pollcount === 0) {
    return g_poll(g_bb11__23__23_string_2d_append);
  } else {
    g_r3 = g_r1.codes.length;
    g_r4 = g_r2.codes.length;
    if (typeof g_r4 === "number") {
      if (typeof g_r3 === "number") {
        g_stack[g_sp+1] = (g_inttemp2 = (g_inttemp1 = g_r3 + g_r4)<<2>>2) === g_inttemp1 && g_inttemp2;
        if (!(g_stack[g_sp+1] === false)) {
          ++g_sp;
          g_r4 = g_stack[g_sp];
          --g_sp;
          return g_bb15__23__23_string_2d_append();
        } else {
          ++g_sp;
          g_stack[g_sp] = g_r0;
          g_stack[g_sp+1] = g_r1;
          g_stack[g_sp+2] = g_r2;
          g_stack[g_sp+3] = g_r3;
          g_r2 = g_r4;
          g_r1 = g_r3;
          g_r0 = g_bb64__23__23_string_2d_append;
          g_nargs = 2;
          g_sp += 3;
          return g_peps["+"]();
        }
      } else {
        if (g_r4 instanceof G_Flonum) {
          return g_bb66__23__23_string_2d_append();
        } else {
          return g_bb68__23__23_string_2d_append();
        }
      }
    } else {
      if (g_r4 instanceof G_Flonum) {
        return g_bb66__23__23_string_2d_append();
      } else {
        return g_bb68__23__23_string_2d_append();
      }
    }
  }
};


g_bb10__23__23_string_2d_append.id = 10;
g_bb10__23__23_string_2d_append.parent = g_bb1__23__23_string_2d_append;

g_bb11__23__23_string_2d_append = function () {
  g_r3 = g_r1.codes.length;
  g_r4 = g_r2.codes.length;
  if (typeof g_r4 === "number") {
    if (typeof g_r3 === "number") {
      g_stack[g_sp+1] = (g_inttemp2 = (g_inttemp1 = g_r3 + g_r4)<<2>>2) === g_inttemp1 && g_inttemp2;
      if (!(g_stack[g_sp+1] === false)) {
        ++g_sp;
        g_r4 = g_stack[g_sp];
        --g_sp;
        return g_bb15__23__23_string_2d_append();
      } else {
        ++g_sp;
        g_stack[g_sp] = g_r0;
        g_stack[g_sp+1] = g_r1;
        g_stack[g_sp+2] = g_r2;
        g_stack[g_sp+3] = g_r3;
        g_r2 = g_r4;
        g_r1 = g_r3;
        g_r0 = g_bb64__23__23_string_2d_append;
        g_nargs = 2;
        g_sp += 3;
        return g_peps["+"]();
      }
    } else {
      if (g_r4 instanceof G_Flonum) {
        return g_bb66__23__23_string_2d_append();
      } else {
        return g_bb68__23__23_string_2d_append();
      }
    }
  } else {
    if (g_r4 instanceof G_Flonum) {
      return g_bb66__23__23_string_2d_append();
    } else {
      return g_bb68__23__23_string_2d_append();
    }
  }
};


g_bb11__23__23_string_2d_append.id = 11;
g_bb11__23__23_string_2d_append.parent = g_bb1__23__23_string_2d_append;

g_bb4__23__23_string_2d_append = function () { // return-point
  g_stack[g_sp-1].val = g_r1;
  if (g_stack[g_sp] instanceof G_Pair) {
    g_r1 = g_stack[g_sp].cdr;
    --g_sp;
    g_r2 = g_r1;
    g_r1 = g_stack[g_sp];
    g_r0 = g_stack[g_sp-1];
    g_sp -= 2;
    if (--g_pollcount === 0) {
      return g_poll(g_bb7__23__23_string_2d_append);
    } else {
      if (g_r2 === null) {
        return g_bb72__23__23_string_2d_append();
      } else {
        return g_bb8__23__23_string_2d_append();
      }
    }
  } else {
    g_r1 = g_stack[g_sp];
    g_r0 = g_bb74__23__23_string_2d_append;
    g_nargs = 1;
    --g_sp;
    return g_peps["cdr"]();
  }
};


g_bb4__23__23_string_2d_append.id = 12;
g_bb4__23__23_string_2d_append.parent = g_bb1__23__23_string_2d_append;
g_bb4__23__23_string_2d_append.fs = 3;
g_bb4__23__23_string_2d_append.link = 1;

g_bb12__23__23_string_2d_append = function () {
  if (typeof g_r3 === "number") {
    g_stack[g_sp+1] = (g_inttemp2 = (g_inttemp1 = g_r3 + g_r4)<<2>>2) === g_inttemp1 && g_inttemp2;
    if (!(g_stack[g_sp+1] === false)) {
      ++g_sp;
      g_r4 = g_stack[g_sp];
      --g_sp;
      return g_bb15__23__23_string_2d_append();
    } else {
      ++g_sp;
      g_stack[g_sp] = g_r0;
      g_stack[g_sp+1] = g_r1;
      g_stack[g_sp+2] = g_r2;
      g_stack[g_sp+3] = g_r3;
      g_r2 = g_r4;
      g_r1 = g_r3;
      g_r0 = g_bb64__23__23_string_2d_append;
      g_nargs = 2;
      g_sp += 3;
      return g_peps["+"]();
    }
  } else {
    if (g_r4 instanceof G_Flonum) {
      return g_bb66__23__23_string_2d_append();
    } else {
      return g_bb68__23__23_string_2d_append();
    }
  }
};


g_bb12__23__23_string_2d_append.id = 13;
g_bb12__23__23_string_2d_append.parent = g_bb1__23__23_string_2d_append;

g_bb13__23__23_string_2d_append = function () {
  g_stack[g_sp+1] = (g_inttemp2 = (g_inttemp1 = g_r3 + g_r4)<<2>>2) === g_inttemp1 && g_inttemp2;
  if (!(g_stack[g_sp+1] === false)) {
    ++g_sp;
    g_r4 = g_stack[g_sp];
    --g_sp;
    return g_bb15__23__23_string_2d_append();
  } else {
    ++g_sp;
    g_stack[g_sp] = g_r0;
    g_stack[g_sp+1] = g_r1;
    g_stack[g_sp+2] = g_r2;
    g_stack[g_sp+3] = g_r3;
    g_r2 = g_r4;
    g_r1 = g_r3;
    g_r0 = g_bb64__23__23_string_2d_append;
    g_nargs = 2;
    g_sp += 3;
    return g_peps["+"]();
  }
};


g_bb13__23__23_string_2d_append.id = 14;
g_bb13__23__23_string_2d_append.parent = g_bb1__23__23_string_2d_append;

g_bb14__23__23_string_2d_append = function () {
  g_r4 = g_stack[g_sp];
  --g_sp;
  return g_bb15__23__23_string_2d_append();
};


g_bb14__23__23_string_2d_append.id = 15;
g_bb14__23__23_string_2d_append.parent = g_bb1__23__23_string_2d_append;

g_bb15__23__23_string_2d_append = function () {
  g_stack[g_sp+1] = g_make_string(g_r4,0);
  g_stack[g_sp+2] = g_r0;
  g_stack[g_sp+3] = g_r1;
  g_stack[g_sp+4] = g_r2;
  g_stack[g_sp+5] = g_r3;
  g_r2 = g_stack[g_sp+1];
  g_r1 = g_r4;
  g_r3 = 0;
  g_r0 = g_bb62__23__23_string_2d_append;
  g_sp += 5;
  if (--g_pollcount === 0) {
    return g_poll(g_bb16__23__23_string_2d_append);
  } else {
    if (typeof g_stack[g_sp] === "number") {
      return g_bb17__23__23_string_2d_append();
    } else {
      return g_bb37__23__23_string_2d_append();
    }
  }
};


g_bb15__23__23_string_2d_append.id = 16;
g_bb15__23__23_string_2d_append.parent = g_bb1__23__23_string_2d_append;

g_bb63__23__23_string_2d_append = function () {
  g_stack[g_sp] = g_r0;
  g_stack[g_sp+1] = g_r1;
  g_stack[g_sp+2] = g_r2;
  g_stack[g_sp+3] = g_r3;
  g_r2 = g_r4;
  g_r1 = g_r3;
  g_r0 = g_bb64__23__23_string_2d_append;
  g_nargs = 2;
  g_sp += 3;
  return g_peps["+"]();
};


g_bb63__23__23_string_2d_append.id = 17;
g_bb63__23__23_string_2d_append.parent = g_bb1__23__23_string_2d_append;

g_bb64__23__23_string_2d_append = function () { // return-point
  g_r4 = g_r1;
  g_r3 = g_stack[g_sp];
  g_r2 = g_stack[g_sp-1];
  g_r1 = g_stack[g_sp-2];
  g_r0 = g_stack[g_sp-3];
  g_sp -= 4;
  return g_bb15__23__23_string_2d_append();
};


g_bb64__23__23_string_2d_append.id = 18;
g_bb64__23__23_string_2d_append.parent = g_bb1__23__23_string_2d_append;
g_bb64__23__23_string_2d_append.fs = 4;
g_bb64__23__23_string_2d_append.link = 1;

g_bb65__23__23_string_2d_append = function () {
  if (g_r4 instanceof G_Flonum) {
    if (g_r3 instanceof G_Flonum) {
      g_r4 = new G_Flonum(g_r3.val + g_r4.val);
      return g_bb15__23__23_string_2d_append();
    } else {
      return g_bb68__23__23_string_2d_append();
    }
  } else {
    return g_bb68__23__23_string_2d_append();
  }
};


g_bb65__23__23_string_2d_append.id = 19;
g_bb65__23__23_string_2d_append.parent = g_bb1__23__23_string_2d_append;

g_bb66__23__23_string_2d_append = function () {
  if (g_r3 instanceof G_Flonum) {
    g_r4 = new G_Flonum(g_r3.val + g_r4.val);
    return g_bb15__23__23_string_2d_append();
  } else {
    return g_bb68__23__23_string_2d_append();
  }
};


g_bb66__23__23_string_2d_append.id = 20;
g_bb66__23__23_string_2d_append.parent = g_bb1__23__23_string_2d_append;

g_bb68__23__23_string_2d_append = function () {
  g_stack[g_sp+1] = g_r0;
  g_stack[g_sp+2] = g_r1;
  g_stack[g_sp+3] = g_r2;
  g_stack[g_sp+4] = g_r3;
  g_r2 = g_r4;
  g_r1 = g_r3;
  g_r0 = g_bb64__23__23_string_2d_append;
  g_nargs = 2;
  g_sp += 4;
  return g_peps["+"]();
};


g_bb68__23__23_string_2d_append.id = 21;
g_bb68__23__23_string_2d_append.parent = g_bb1__23__23_string_2d_append;

g_bb69__23__23_string_2d_append = function () {
  g_r1 = g_r2;
  g_r0 = g_bb70__23__23_string_2d_append;
  g_nargs = 1;
  return g_peps["car"]();
};


g_bb69__23__23_string_2d_append.id = 22;
g_bb69__23__23_string_2d_append.parent = g_bb1__23__23_string_2d_append;

g_bb70__23__23_string_2d_append = function () { // return-point
  return g_bb71__23__23_string_2d_append();
};


g_bb70__23__23_string_2d_append.id = 23;
g_bb70__23__23_string_2d_append.parent = g_bb1__23__23_string_2d_append;
g_bb70__23__23_string_2d_append.fs = 3;
g_bb70__23__23_string_2d_append.link = 1;

g_bb75__23__23_string_2d_append = function () {
  return g_bb75__23__23_string_2d_append();
};


g_bb75__23__23_string_2d_append.id = 24;
g_bb75__23__23_string_2d_append.parent = g_bb1__23__23_string_2d_append;

g_bb5__23__23_string_2d_append = function () {
  g_r1 = g_stack[g_sp].cdr;
  --g_sp;
  g_r2 = g_r1;
  g_r1 = g_stack[g_sp];
  g_r0 = g_stack[g_sp-1];
  g_sp -= 2;
  if (--g_pollcount === 0) {
    return g_poll(g_bb7__23__23_string_2d_append);
  } else {
    if (g_r2 === null) {
      return g_bb72__23__23_string_2d_append();
    } else {
      return g_bb8__23__23_string_2d_append();
    }
  }
};


g_bb5__23__23_string_2d_append.id = 25;
g_bb5__23__23_string_2d_append.parent = g_bb1__23__23_string_2d_append;

g_bb6__23__23_string_2d_append = function () {
  g_r2 = g_r1;
  g_r1 = g_stack[g_sp];
  g_r0 = g_stack[g_sp-1];
  g_sp -= 2;
  if (--g_pollcount === 0) {
    return g_poll(g_bb7__23__23_string_2d_append);
  } else {
    if (g_r2 === null) {
      return g_bb72__23__23_string_2d_append();
    } else {
      return g_bb8__23__23_string_2d_append();
    }
  }
};


g_bb6__23__23_string_2d_append.id = 26;
g_bb6__23__23_string_2d_append.parent = g_bb1__23__23_string_2d_append;

g_bb73__23__23_string_2d_append = function () {
  g_r1 = g_stack[g_sp];
  g_r0 = g_bb74__23__23_string_2d_append;
  g_nargs = 1;
  --g_sp;
  return g_peps["cdr"]();
};


g_bb73__23__23_string_2d_append.id = 27;
g_bb73__23__23_string_2d_append.parent = g_bb1__23__23_string_2d_append;

g_bb16__23__23_string_2d_append = function () {
  if (typeof g_stack[g_sp] === "number") {
    if (typeof g_r3 === "number") {
      if (g_r3 < g_stack[g_sp]) {
        return g_bb19__23__23_string_2d_append();
      } else {
        if (typeof g_stack[g_sp] === "number") {
          return g_bb41__23__23_string_2d_append();
        } else {
          return g_bb55__23__23_string_2d_append();
        }
      }
    } else {
      if (g_stack[g_sp] instanceof G_Flonum) {
        return g_bb38__23__23_string_2d_append();
      } else {
        return g_bb61__23__23_string_2d_append();
      }
    }
  } else {
    if (g_stack[g_sp] instanceof G_Flonum) {
      return g_bb38__23__23_string_2d_append();
    } else {
      return g_bb61__23__23_string_2d_append();
    }
  }
};


g_bb16__23__23_string_2d_append.id = 28;
g_bb16__23__23_string_2d_append.parent = g_bb1__23__23_string_2d_append;

g_bb62__23__23_string_2d_append = function () { // return-point
  g_r1 = g_stack[g_sp-1];
  g_sp -= 2;
  return g_stack[g_sp+2]();
};


g_bb62__23__23_string_2d_append.id = 29;
g_bb62__23__23_string_2d_append.parent = g_bb1__23__23_string_2d_append;
g_bb62__23__23_string_2d_append.fs = 2;
g_bb62__23__23_string_2d_append.link = 2;

g_bb17__23__23_string_2d_append = function () {
  if (typeof g_r3 === "number") {
    if (g_r3 < g_stack[g_sp]) {
      return g_bb19__23__23_string_2d_append();
    } else {
      if (typeof g_stack[g_sp] === "number") {
        return g_bb41__23__23_string_2d_append();
      } else {
        return g_bb55__23__23_string_2d_append();
      }
    }
  } else {
    if (g_stack[g_sp] instanceof G_Flonum) {
      return g_bb38__23__23_string_2d_append();
    } else {
      return g_bb61__23__23_string_2d_append();
    }
  }
};


g_bb17__23__23_string_2d_append.id = 30;
g_bb17__23__23_string_2d_append.parent = g_bb1__23__23_string_2d_append;

g_bb37__23__23_string_2d_append = function () {
  if (g_stack[g_sp] instanceof G_Flonum) {
    if (g_r3 instanceof G_Flonum) {
      if (g_r3.val < g_stack[g_sp].val) {
        return g_bb19__23__23_string_2d_append();
      } else {
        if (typeof g_stack[g_sp] === "number") {
          return g_bb41__23__23_string_2d_append();
        } else {
          return g_bb55__23__23_string_2d_append();
        }
      }
    } else {
      return g_bb61__23__23_string_2d_append();
    }
  } else {
    return g_bb61__23__23_string_2d_append();
  }
};


g_bb37__23__23_string_2d_append.id = 31;
g_bb37__23__23_string_2d_append.parent = g_bb1__23__23_string_2d_append;

g_bb67__23__23_string_2d_append = function () {
  g_r4 = new G_Flonum(g_r3.val + g_r4.val);
  return g_bb15__23__23_string_2d_append();
};


g_bb67__23__23_string_2d_append.id = 32;
g_bb67__23__23_string_2d_append.parent = g_bb1__23__23_string_2d_append;

g_bb71__23__23_string_2d_append = function () {
  return g_bb71__23__23_string_2d_append();
};


g_bb71__23__23_string_2d_append.id = 33;
g_bb71__23__23_string_2d_append.parent = g_bb1__23__23_string_2d_append;

g_bb18__23__23_string_2d_append = function () {
  if (g_r3 < g_stack[g_sp]) {
    return g_bb19__23__23_string_2d_append();
  } else {
    if (typeof g_stack[g_sp] === "number") {
      return g_bb41__23__23_string_2d_append();
    } else {
      return g_bb55__23__23_string_2d_append();
    }
  }
};


g_bb18__23__23_string_2d_append.id = 34;
g_bb18__23__23_string_2d_append.parent = g_bb1__23__23_string_2d_append;

g_bb19__23__23_string_2d_append = function () {
  g_r4 = g_make_interned_char(g_stack[g_sp-2].codes[g_r3]);
  g_r2.codes[g_r3] = g_r4.code;
  if (typeof g_r1 === "number") {
    if (typeof g_r3 === "number") {
      return g_bb21__23__23_string_2d_append();
    } else {
      return g_bb32__23__23_string_2d_append();
    }
  } else {
    if (g_r1 instanceof G_Flonum) {
      return g_bb33__23__23_string_2d_append();
    } else {
      return g_bb36__23__23_string_2d_append();
    }
  }
};


g_bb19__23__23_string_2d_append.id = 35;
g_bb19__23__23_string_2d_append.parent = g_bb1__23__23_string_2d_append;

g_bb40__23__23_string_2d_append = function () {
  if (typeof g_stack[g_sp] === "number") {
    if (typeof g_r3 === "number") {
      return g_bb42__23__23_string_2d_append();
    } else {
      return g_bb55__23__23_string_2d_append();
    }
  } else {
    if (g_stack[g_sp] instanceof G_Flonum) {
      return g_bb56__23__23_string_2d_append();
    } else {
      return g_bb60__23__23_string_2d_append();
    }
  }
};


g_bb40__23__23_string_2d_append.id = 36;
g_bb40__23__23_string_2d_append.parent = g_bb1__23__23_string_2d_append;

g_bb41__23__23_string_2d_append = function () {
  if (typeof g_r3 === "number") {
    if (g_r3 >= g_stack[g_sp]) {
      if (typeof g_stack[g_sp] === "number") {
        return g_bb44__23__23_string_2d_append();
      } else {
        return g_bb49__23__23_string_2d_append();
      }
    } else {
      if (typeof g_r1 === "number") {
        return g_bb20__23__23_string_2d_append();
      } else {
        return g_bb32__23__23_string_2d_append();
      }
    }
  } else {
    if (g_stack[g_sp] instanceof G_Flonum) {
      return g_bb56__23__23_string_2d_append();
    } else {
      return g_bb60__23__23_string_2d_append();
    }
  }
};


g_bb41__23__23_string_2d_append.id = 37;
g_bb41__23__23_string_2d_append.parent = g_bb1__23__23_string_2d_append;

g_bb55__23__23_string_2d_append = function () {
  if (g_stack[g_sp] instanceof G_Flonum) {
    if (g_r3 instanceof G_Flonum) {
      if (g_r3.val >= g_stack[g_sp].val) {
        if (typeof g_stack[g_sp] === "number") {
          return g_bb44__23__23_string_2d_append();
        } else {
          return g_bb49__23__23_string_2d_append();
        }
      } else {
        if (typeof g_r1 === "number") {
          return g_bb20__23__23_string_2d_append();
        } else {
          return g_bb32__23__23_string_2d_append();
        }
      }
    } else {
      return g_bb60__23__23_string_2d_append();
    }
  } else {
    return g_bb60__23__23_string_2d_append();
  }
};


g_bb55__23__23_string_2d_append.id = 38;
g_bb55__23__23_string_2d_append.parent = g_bb1__23__23_string_2d_append;

g_bb38__23__23_string_2d_append = function () {
  if (g_r3 instanceof G_Flonum) {
    if (g_r3.val < g_stack[g_sp].val) {
      return g_bb19__23__23_string_2d_append();
    } else {
      if (typeof g_stack[g_sp] === "number") {
        return g_bb41__23__23_string_2d_append();
      } else {
        return g_bb55__23__23_string_2d_append();
      }
    }
  } else {
    return g_bb61__23__23_string_2d_append();
  }
};


g_bb38__23__23_string_2d_append.id = 39;
g_bb38__23__23_string_2d_append.parent = g_bb1__23__23_string_2d_append;

g_bb61__23__23_string_2d_append = function () {
  g_stack[g_sp+1] = g_r0;
  g_stack[g_sp+2] = g_r1;
  g_stack[g_sp+3] = g_r2;
  g_stack[g_sp+4] = g_r3;
  g_r2 = g_stack[g_sp];
  g_r1 = g_r3;
  g_r0 = g_bb53__23__23_string_2d_append;
  g_nargs = 2;
  g_sp += 4;
  return g_peps["<"]();
};


g_bb61__23__23_string_2d_append.id = 40;
g_bb61__23__23_string_2d_append.parent = g_bb1__23__23_string_2d_append;

g_bb39__23__23_string_2d_append = function () {
  if (g_r3.val < g_stack[g_sp].val) {
    return g_bb19__23__23_string_2d_append();
  } else {
    if (typeof g_stack[g_sp] === "number") {
      return g_bb41__23__23_string_2d_append();
    } else {
      return g_bb55__23__23_string_2d_append();
    }
  }
};


g_bb39__23__23_string_2d_append.id = 41;
g_bb39__23__23_string_2d_append.parent = g_bb1__23__23_string_2d_append;

g_bb20__23__23_string_2d_append = function () {
  if (typeof g_r3 === "number") {
    if (g_r3 < g_r1) {
      if (typeof g_r3 === "number") {
        return g_bb23__23__23_string_2d_append();
      } else {
        return g_bb27__23__23_string_2d_append();
      }
    } else {
      return g_bb35__23__23_string_2d_append();
    }
  } else {
    if (g_r1 instanceof G_Flonum) {
      return g_bb33__23__23_string_2d_append();
    } else {
      return g_bb36__23__23_string_2d_append();
    }
  }
};


g_bb20__23__23_string_2d_append.id = 42;
g_bb20__23__23_string_2d_append.parent = g_bb1__23__23_string_2d_append;

g_bb21__23__23_string_2d_append = function () {
  if (g_r3 < g_r1) {
    if (typeof g_r3 === "number") {
      return g_bb23__23__23_string_2d_append();
    } else {
      return g_bb27__23__23_string_2d_append();
    }
  } else {
    return g_bb35__23__23_string_2d_append();
  }
};


g_bb21__23__23_string_2d_append.id = 43;
g_bb21__23__23_string_2d_append.parent = g_bb1__23__23_string_2d_append;

g_bb32__23__23_string_2d_append = function () {
  if (g_r1 instanceof G_Flonum) {
    if (g_r3 instanceof G_Flonum) {
      if (g_r3.val < g_r1.val) {
        if (typeof g_r3 === "number") {
          return g_bb23__23__23_string_2d_append();
        } else {
          return g_bb27__23__23_string_2d_append();
        }
      } else {
        return g_bb35__23__23_string_2d_append();
      }
    } else {
      return g_bb36__23__23_string_2d_append();
    }
  } else {
    return g_bb36__23__23_string_2d_append();
  }
};


g_bb32__23__23_string_2d_append.id = 44;
g_bb32__23__23_string_2d_append.parent = g_bb1__23__23_string_2d_append;

g_bb33__23__23_string_2d_append = function () {
  if (g_r3 instanceof G_Flonum) {
    if (g_r3.val < g_r1.val) {
      if (typeof g_r3 === "number") {
        return g_bb23__23__23_string_2d_append();
      } else {
        return g_bb27__23__23_string_2d_append();
      }
    } else {
      return g_bb35__23__23_string_2d_append();
    }
  } else {
    return g_bb36__23__23_string_2d_append();
  }
};


g_bb33__23__23_string_2d_append.id = 45;
g_bb33__23__23_string_2d_append.parent = g_bb1__23__23_string_2d_append;

g_bb36__23__23_string_2d_append = function () {
  g_stack[g_sp+1] = g_r0;
  g_stack[g_sp+2] = g_r1;
  g_stack[g_sp+3] = g_r2;
  g_stack[g_sp+4] = g_r3;
  g_r2 = g_r1;
  g_r1 = g_r3;
  g_r0 = g_bb25__23__23_string_2d_append;
  g_nargs = 2;
  g_sp += 4;
  return g_peps["<"]();
};


g_bb36__23__23_string_2d_append.id = 46;
g_bb36__23__23_string_2d_append.parent = g_bb1__23__23_string_2d_append;

g_bb42__23__23_string_2d_append = function () {
  if (g_r3 >= g_stack[g_sp]) {
    if (typeof g_stack[g_sp] === "number") {
      return g_bb44__23__23_string_2d_append();
    } else {
      return g_bb49__23__23_string_2d_append();
    }
  } else {
    if (typeof g_r1 === "number") {
      return g_bb20__23__23_string_2d_append();
    } else {
      return g_bb32__23__23_string_2d_append();
    }
  }
};


g_bb42__23__23_string_2d_append.id = 47;
g_bb42__23__23_string_2d_append.parent = g_bb1__23__23_string_2d_append;

g_bb56__23__23_string_2d_append = function () {
  if (g_r3 instanceof G_Flonum) {
    if (g_r3.val >= g_stack[g_sp].val) {
      if (typeof g_stack[g_sp] === "number") {
        return g_bb44__23__23_string_2d_append();
      } else {
        return g_bb49__23__23_string_2d_append();
      }
    } else {
      if (typeof g_r1 === "number") {
        return g_bb20__23__23_string_2d_append();
      } else {
        return g_bb32__23__23_string_2d_append();
      }
    }
  } else {
    return g_bb60__23__23_string_2d_append();
  }
};


g_bb56__23__23_string_2d_append.id = 48;
g_bb56__23__23_string_2d_append.parent = g_bb1__23__23_string_2d_append;

g_bb60__23__23_string_2d_append = function () {
  g_stack[g_sp+1] = g_r0;
  g_stack[g_sp+2] = g_r1;
  g_stack[g_sp+3] = g_r2;
  g_stack[g_sp+4] = g_r3;
  g_r2 = g_stack[g_sp];
  g_r1 = g_r3;
  g_r0 = g_bb47__23__23_string_2d_append;
  g_nargs = 2;
  g_sp += 4;
  return g_peps[">="]();
};


g_bb60__23__23_string_2d_append.id = 49;
g_bb60__23__23_string_2d_append.parent = g_bb1__23__23_string_2d_append;

g_bb43__23__23_string_2d_append = function () {
  if (typeof g_stack[g_sp] === "number") {
    if (typeof g_r3 === "number") {
      return g_bb45__23__23_string_2d_append();
    } else {
      return g_bb49__23__23_string_2d_append();
    }
  } else {
    if (g_stack[g_sp] instanceof G_Flonum) {
      return g_bb50__23__23_string_2d_append();
    } else {
      return g_bb46__23__23_string_2d_append();
    }
  }
};


g_bb43__23__23_string_2d_append.id = 50;
g_bb43__23__23_string_2d_append.parent = g_bb1__23__23_string_2d_append;

g_bb44__23__23_string_2d_append = function () {
  if (typeof g_r3 === "number") {
    g_r4 = (g_inttemp2 = (g_inttemp1 = g_r3 - g_stack[g_sp])<<2>>2) === g_inttemp1 && g_inttemp2;
    if (!(g_r4 === false)) {
      return g_bb31__23__23_string_2d_append();
    } else {
      return g_bb46__23__23_string_2d_append();
    }
  } else {
    if (g_stack[g_sp] instanceof G_Flonum) {
      return g_bb50__23__23_string_2d_append();
    } else {
      return g_bb46__23__23_string_2d_append();
    }
  }
};


g_bb44__23__23_string_2d_append.id = 51;
g_bb44__23__23_string_2d_append.parent = g_bb1__23__23_string_2d_append;

g_bb49__23__23_string_2d_append = function () {
  if (g_stack[g_sp] instanceof G_Flonum) {
    if (g_r3 instanceof G_Flonum) {
      g_r4 = new G_Flonum(g_r3.val - g_stack[g_sp].val);
      return g_bb31__23__23_string_2d_append();
    } else {
      return g_bb46__23__23_string_2d_append();
    }
  } else {
    return g_bb46__23__23_string_2d_append();
  }
};


g_bb49__23__23_string_2d_append.id = 52;
g_bb49__23__23_string_2d_append.parent = g_bb1__23__23_string_2d_append;

g_bb58__23__23_string_2d_append = function () {
  if (typeof g_r1 === "number") {
    if (typeof g_r3 === "number") {
      return g_bb21__23__23_string_2d_append();
    } else {
      return g_bb32__23__23_string_2d_append();
    }
  } else {
    if (g_r1 instanceof G_Flonum) {
      return g_bb33__23__23_string_2d_append();
    } else {
      return g_bb36__23__23_string_2d_append();
    }
  }
};


g_bb58__23__23_string_2d_append.id = 53;
g_bb58__23__23_string_2d_append.parent = g_bb1__23__23_string_2d_append;

g_bb57__23__23_string_2d_append = function () {
  if (g_r3.val >= g_stack[g_sp].val) {
    if (typeof g_stack[g_sp] === "number") {
      return g_bb44__23__23_string_2d_append();
    } else {
      return g_bb49__23__23_string_2d_append();
    }
  } else {
    if (typeof g_r1 === "number") {
      return g_bb20__23__23_string_2d_append();
    } else {
      return g_bb32__23__23_string_2d_append();
    }
  }
};


g_bb57__23__23_string_2d_append.id = 54;
g_bb57__23__23_string_2d_append.parent = g_bb1__23__23_string_2d_append;

g_bb53__23__23_string_2d_append = function () { // return-point
  if (!(g_r1 === false)) {
    g_r3 = g_stack[g_sp];
    g_r2 = g_stack[g_sp-1];
    g_r1 = g_stack[g_sp-2];
    g_r0 = g_stack[g_sp-3];
    g_sp -= 4;
    return g_bb19__23__23_string_2d_append();
  } else {
    g_r3 = g_stack[g_sp];
    g_r2 = g_stack[g_sp-1];
    g_r1 = g_stack[g_sp-2];
    g_r0 = g_stack[g_sp-3];
    if (typeof g_stack[g_sp-4] === "number") {
      g_sp -= 4;
      if (typeof g_r3 === "number") {
        return g_bb42__23__23_string_2d_append();
      } else {
        return g_bb55__23__23_string_2d_append();
      }
    } else {
      g_sp -= 4;
      if (g_stack[g_sp] instanceof G_Flonum) {
        return g_bb56__23__23_string_2d_append();
      } else {
        return g_bb60__23__23_string_2d_append();
      }
    }
  }
};


g_bb53__23__23_string_2d_append.id = 55;
g_bb53__23__23_string_2d_append.parent = g_bb1__23__23_string_2d_append;
g_bb53__23__23_string_2d_append.fs = 7;
g_bb53__23__23_string_2d_append.link = 4;

g_bb22__23__23_string_2d_append = function () {
  if (typeof g_r3 === "number") {
    return g_bb23__23__23_string_2d_append();
  } else {
    return g_bb27__23__23_string_2d_append();
  }
};


g_bb22__23__23_string_2d_append.id = 56;
g_bb22__23__23_string_2d_append.parent = g_bb1__23__23_string_2d_append;

g_bb23__23__23_string_2d_append = function () {
  g_r4 = (g_inttemp2 = (g_inttemp1 = 1 + g_r3)<<2>>2) === g_inttemp1 && g_inttemp2;
  if (!(g_r4 === false)) {
    return g_bb24__23__23_string_2d_append();
  } else {
    return g_bb27__23__23_string_2d_append();
  }
};


g_bb23__23__23_string_2d_append.id = 57;
g_bb23__23__23_string_2d_append.parent = g_bb1__23__23_string_2d_append;

g_bb27__23__23_string_2d_append = function () {
  g_stack[g_sp+1] = g_r0;
  g_stack[g_sp+2] = g_r1;
  g_stack[g_sp+3] = g_r2;
  g_r2 = g_r3;
  g_r1 = 1;
  g_r0 = g_bb28__23__23_string_2d_append;
  g_nargs = 2;
  g_sp += 3;
  return g_peps["+"]();
};


g_bb27__23__23_string_2d_append.id = 58;
g_bb27__23__23_string_2d_append.parent = g_bb1__23__23_string_2d_append;

g_bb35__23__23_string_2d_append = function () {
  g_r1 = void 0;
  g_sp -= 3;
  return g_r0;
};


g_bb35__23__23_string_2d_append.id = 59;
g_bb35__23__23_string_2d_append.parent = g_bb1__23__23_string_2d_append;

g_bb34__23__23_string_2d_append = function () {
  if (g_r3.val < g_r1.val) {
    if (typeof g_r3 === "number") {
      return g_bb23__23__23_string_2d_append();
    } else {
      return g_bb27__23__23_string_2d_append();
    }
  } else {
    return g_bb35__23__23_string_2d_append();
  }
};


g_bb34__23__23_string_2d_append.id = 60;
g_bb34__23__23_string_2d_append.parent = g_bb1__23__23_string_2d_append;

g_bb25__23__23_string_2d_append = function () { // return-point
  if (!(g_r1 === false)) {
    g_r3 = g_stack[g_sp];
    g_r2 = g_stack[g_sp-1];
    g_r1 = g_stack[g_sp-2];
    g_r0 = g_stack[g_sp-3];
    if (typeof g_r3 === "number") {
      g_sp -= 4;
      return g_bb23__23__23_string_2d_append();
    } else {
      g_sp -= 4;
      return g_bb27__23__23_string_2d_append();
    }
  } else {
    g_r0 = g_stack[g_sp-3];
    g_sp -= 4;
    return g_bb35__23__23_string_2d_append();
  }
};


g_bb25__23__23_string_2d_append.id = 61;
g_bb25__23__23_string_2d_append.parent = g_bb1__23__23_string_2d_append;
g_bb25__23__23_string_2d_append.fs = 7;
g_bb25__23__23_string_2d_append.link = 4;

g_bb47__23__23_string_2d_append = function () { // return-point
  if (!(g_r1 === false)) {
    g_r3 = g_stack[g_sp];
    g_r2 = g_stack[g_sp-1];
    g_r1 = g_stack[g_sp-2];
    g_r0 = g_stack[g_sp-3];
    if (typeof g_stack[g_sp-4] === "number") {
      g_sp -= 4;
      if (typeof g_r3 === "number") {
        return g_bb45__23__23_string_2d_append();
      } else {
        return g_bb49__23__23_string_2d_append();
      }
    } else {
      g_sp -= 4;
      if (g_stack[g_sp] instanceof G_Flonum) {
        return g_bb50__23__23_string_2d_append();
      } else {
        return g_bb46__23__23_string_2d_append();
      }
    }
  } else {
    g_r3 = g_stack[g_sp];
    g_r2 = g_stack[g_sp-1];
    g_r1 = g_stack[g_sp-2];
    g_r0 = g_stack[g_sp-3];
    if (typeof g_r1 === "number") {
      g_sp -= 4;
      if (typeof g_r3 === "number") {
        return g_bb21__23__23_string_2d_append();
      } else {
        return g_bb32__23__23_string_2d_append();
      }
    } else {
      g_sp -= 4;
      if (g_r1 instanceof G_Flonum) {
        return g_bb33__23__23_string_2d_append();
      } else {
        return g_bb36__23__23_string_2d_append();
      }
    }
  }
};


g_bb47__23__23_string_2d_append.id = 62;
g_bb47__23__23_string_2d_append.parent = g_bb1__23__23_string_2d_append;
g_bb47__23__23_string_2d_append.fs = 7;
g_bb47__23__23_string_2d_append.link = 4;

g_bb45__23__23_string_2d_append = function () {
  g_r4 = (g_inttemp2 = (g_inttemp1 = g_r3 - g_stack[g_sp])<<2>>2) === g_inttemp1 && g_inttemp2;
  if (!(g_r4 === false)) {
    return g_bb31__23__23_string_2d_append();
  } else {
    return g_bb46__23__23_string_2d_append();
  }
};


g_bb45__23__23_string_2d_append.id = 63;
g_bb45__23__23_string_2d_append.parent = g_bb1__23__23_string_2d_append;

g_bb50__23__23_string_2d_append = function () {
  if (g_r3 instanceof G_Flonum) {
    g_r4 = new G_Flonum(g_r3.val - g_stack[g_sp].val);
    return g_bb31__23__23_string_2d_append();
  } else {
    return g_bb46__23__23_string_2d_append();
  }
};


g_bb50__23__23_string_2d_append.id = 64;
g_bb50__23__23_string_2d_append.parent = g_bb1__23__23_string_2d_append;

g_bb46__23__23_string_2d_append = function () {
  g_stack[g_sp+1] = g_r0;
  g_stack[g_sp+2] = g_r1;
  g_stack[g_sp+3] = g_r2;
  g_stack[g_sp+4] = g_r3;
  g_r2 = g_stack[g_sp];
  g_r1 = g_r3;
  g_r0 = g_bb30__23__23_string_2d_append;
  g_nargs = 2;
  g_sp += 4;
  return g_peps["-"]();
};


g_bb46__23__23_string_2d_append.id = 65;
g_bb46__23__23_string_2d_append.parent = g_bb1__23__23_string_2d_append;

g_bb31__23__23_string_2d_append = function () {
  g_r4 = g_make_interned_char(g_stack[g_sp-1].codes[g_r4]);
  g_r2.codes[g_r3] = g_r4.code;
  if (typeof g_r1 === "number") {
    if (typeof g_r3 === "number") {
      return g_bb21__23__23_string_2d_append();
    } else {
      return g_bb32__23__23_string_2d_append();
    }
  } else {
    if (g_r1 instanceof G_Flonum) {
      return g_bb33__23__23_string_2d_append();
    } else {
      return g_bb36__23__23_string_2d_append();
    }
  }
};


g_bb31__23__23_string_2d_append.id = 66;
g_bb31__23__23_string_2d_append.parent = g_bb1__23__23_string_2d_append;

g_bb51__23__23_string_2d_append = function () {
  g_r4 = new G_Flonum(g_r3.val - g_stack[g_sp].val);
  return g_bb31__23__23_string_2d_append();
};


g_bb51__23__23_string_2d_append.id = 67;
g_bb51__23__23_string_2d_append.parent = g_bb1__23__23_string_2d_append;

g_bb59__23__23_string_2d_append = function () {
  g_r3 = g_stack[g_sp];
  g_r2 = g_stack[g_sp-1];
  g_r1 = g_stack[g_sp-2];
  g_r0 = g_stack[g_sp-3];
  g_sp -= 4;
  return g_bb19__23__23_string_2d_append();
};


g_bb59__23__23_string_2d_append.id = 68;
g_bb59__23__23_string_2d_append.parent = g_bb1__23__23_string_2d_append;

g_bb54__23__23_string_2d_append = function () {
  g_r3 = g_stack[g_sp];
  g_r2 = g_stack[g_sp-1];
  g_r1 = g_stack[g_sp-2];
  g_r0 = g_stack[g_sp-3];
  if (typeof g_stack[g_sp-4] === "number") {
    g_sp -= 4;
    if (typeof g_r3 === "number") {
      return g_bb42__23__23_string_2d_append();
    } else {
      return g_bb55__23__23_string_2d_append();
    }
  } else {
    g_sp -= 4;
    if (g_stack[g_sp] instanceof G_Flonum) {
      return g_bb56__23__23_string_2d_append();
    } else {
      return g_bb60__23__23_string_2d_append();
    }
  }
};


g_bb54__23__23_string_2d_append.id = 69;
g_bb54__23__23_string_2d_append.parent = g_bb1__23__23_string_2d_append;

g_bb24__23__23_string_2d_append = function () {
  g_r3 = g_r4;
  if (--g_pollcount === 0) {
    return g_poll(g_bb16__23__23_string_2d_append);
  } else {
    if (typeof g_stack[g_sp] === "number") {
      return g_bb17__23__23_string_2d_append();
    } else {
      return g_bb37__23__23_string_2d_append();
    }
  }
};


g_bb24__23__23_string_2d_append.id = 70;
g_bb24__23__23_string_2d_append.parent = g_bb1__23__23_string_2d_append;

g_bb28__23__23_string_2d_append = function () { // return-point
  g_r4 = g_r1;
  g_r2 = g_stack[g_sp];
  g_r1 = g_stack[g_sp-1];
  g_r0 = g_stack[g_sp-2];
  g_sp -= 3;
  return g_bb24__23__23_string_2d_append();
};


g_bb28__23__23_string_2d_append.id = 71;
g_bb28__23__23_string_2d_append.parent = g_bb1__23__23_string_2d_append;
g_bb28__23__23_string_2d_append.fs = 6;
g_bb28__23__23_string_2d_append.link = 4;

g_bb26__23__23_string_2d_append = function () {
  g_r3 = g_stack[g_sp];
  g_r2 = g_stack[g_sp-1];
  g_r1 = g_stack[g_sp-2];
  g_r0 = g_stack[g_sp-3];
  if (typeof g_r3 === "number") {
    g_sp -= 4;
    return g_bb23__23__23_string_2d_append();
  } else {
    g_sp -= 4;
    return g_bb27__23__23_string_2d_append();
  }
};


g_bb26__23__23_string_2d_append.id = 72;
g_bb26__23__23_string_2d_append.parent = g_bb1__23__23_string_2d_append;

g_bb29__23__23_string_2d_append = function () {
  g_r0 = g_stack[g_sp-3];
  g_sp -= 4;
  return g_bb35__23__23_string_2d_append();
};


g_bb29__23__23_string_2d_append.id = 73;
g_bb29__23__23_string_2d_append.parent = g_bb1__23__23_string_2d_append;

g_bb48__23__23_string_2d_append = function () {
  g_r3 = g_stack[g_sp];
  g_r2 = g_stack[g_sp-1];
  g_r1 = g_stack[g_sp-2];
  g_r0 = g_stack[g_sp-3];
  if (typeof g_stack[g_sp-4] === "number") {
    g_sp -= 4;
    if (typeof g_r3 === "number") {
      return g_bb45__23__23_string_2d_append();
    } else {
      return g_bb49__23__23_string_2d_append();
    }
  } else {
    g_sp -= 4;
    if (g_stack[g_sp] instanceof G_Flonum) {
      return g_bb50__23__23_string_2d_append();
    } else {
      return g_bb46__23__23_string_2d_append();
    }
  }
};


g_bb48__23__23_string_2d_append.id = 74;
g_bb48__23__23_string_2d_append.parent = g_bb1__23__23_string_2d_append;

g_bb52__23__23_string_2d_append = function () {
  g_r3 = g_stack[g_sp];
  g_r2 = g_stack[g_sp-1];
  g_r1 = g_stack[g_sp-2];
  g_r0 = g_stack[g_sp-3];
  if (typeof g_r1 === "number") {
    g_sp -= 4;
    if (typeof g_r3 === "number") {
      return g_bb21__23__23_string_2d_append();
    } else {
      return g_bb32__23__23_string_2d_append();
    }
  } else {
    g_sp -= 4;
    if (g_r1 instanceof G_Flonum) {
      return g_bb33__23__23_string_2d_append();
    } else {
      return g_bb36__23__23_string_2d_append();
    }
  }
};


g_bb52__23__23_string_2d_append.id = 75;
g_bb52__23__23_string_2d_append.parent = g_bb1__23__23_string_2d_append;

g_bb30__23__23_string_2d_append = function () { // return-point
  g_r4 = g_r1;
  g_r3 = g_stack[g_sp];
  g_r2 = g_stack[g_sp-1];
  g_r1 = g_stack[g_sp-2];
  g_r0 = g_stack[g_sp-3];
  g_sp -= 4;
  return g_bb31__23__23_string_2d_append();
};


g_bb30__23__23_string_2d_append.id = 76;
g_bb30__23__23_string_2d_append.parent = g_bb1__23__23_string_2d_append;
g_bb30__23__23_string_2d_append.fs = 7;
g_bb30__23__23_string_2d_append.link = 4;


g_bb1__23__23_string_2d_append.ctrlpts = [g_bb1__23__23_string_2d_append,g_bb2__23__23_string_2d_append,g_bb3__23__23_string_2d_append,g_bb7__23__23_string_2d_append,g_bb72__23__23_string_2d_append,g_bb8__23__23_string_2d_append,g_bb76__23__23_string_2d_append,g_bb74__23__23_string_2d_append,g_bb77__23__23_string_2d_append,g_bb9__23__23_string_2d_append,g_bb10__23__23_string_2d_append,g_bb11__23__23_string_2d_append,g_bb4__23__23_string_2d_append,g_bb12__23__23_string_2d_append,g_bb13__23__23_string_2d_append,g_bb14__23__23_string_2d_append,g_bb15__23__23_string_2d_append,g_bb63__23__23_string_2d_append,g_bb64__23__23_string_2d_append,g_bb65__23__23_string_2d_append,g_bb66__23__23_string_2d_append,g_bb68__23__23_string_2d_append,g_bb69__23__23_string_2d_append,g_bb70__23__23_string_2d_append,g_bb75__23__23_string_2d_append,g_bb5__23__23_string_2d_append,g_bb6__23__23_string_2d_append,g_bb73__23__23_string_2d_append,g_bb16__23__23_string_2d_append,g_bb62__23__23_string_2d_append,g_bb17__23__23_string_2d_append,g_bb37__23__23_string_2d_append,g_bb67__23__23_string_2d_append,g_bb71__23__23_string_2d_append,g_bb18__23__23_string_2d_append,g_bb19__23__23_string_2d_append,g_bb40__23__23_string_2d_append,g_bb41__23__23_string_2d_append,g_bb55__23__23_string_2d_append,g_bb38__23__23_string_2d_append,g_bb61__23__23_string_2d_append,g_bb39__23__23_string_2d_append,g_bb20__23__23_string_2d_append,g_bb21__23__23_string_2d_append,g_bb32__23__23_string_2d_append,g_bb33__23__23_string_2d_append,g_bb36__23__23_string_2d_append,g_bb42__23__23_string_2d_append,g_bb56__23__23_string_2d_append,g_bb60__23__23_string_2d_append,g_bb43__23__23_string_2d_append,g_bb44__23__23_string_2d_append,g_bb49__23__23_string_2d_append,g_bb58__23__23_string_2d_append,g_bb57__23__23_string_2d_append,g_bb53__23__23_string_2d_append,g_bb22__23__23_string_2d_append,g_bb23__23__23_string_2d_append,g_bb27__23__23_string_2d_append,g_bb35__23__23_string_2d_append,g_bb34__23__23_string_2d_append,g_bb25__23__23_string_2d_append,g_bb47__23__23_string_2d_append,g_bb45__23__23_string_2d_append,g_bb50__23__23_string_2d_append,g_bb46__23__23_string_2d_append,g_bb31__23__23_string_2d_append,g_bb51__23__23_string_2d_append,g_bb59__23__23_string_2d_append,g_bb54__23__23_string_2d_append,g_bb24__23__23_string_2d_append,g_bb28__23__23_string_2d_append,g_bb26__23__23_string_2d_append,g_bb29__23__23_string_2d_append,g_bb48__23__23_string_2d_append,g_bb52__23__23_string_2d_append,g_bb30__23__23_string_2d_append];


g_peps["##string-append"] = g_bb1__23__23_string_2d_append;
g_glo["##string-append"] = g_bb1__23__23_string_2d_append;

g_module_register([[g_make_interned_symbol("gxjs-rt")],[],null,1,g_bb1_gxjs_2d_rt_23_,false]);

// File generated by Gambit v4.9.3
// Link info: (409003 (js ()) "gxjs-ffi" (("gxjs-ffi")) (module_register peps make_interned_symbol r4 r3 make_vector box r2 glo poll pollcount string sp stack foreign ffi r0 r1 wrong_nargs nargs) (##error) (gxjs-ffi# js#console.log js#scm->js js#js->foreign js#alert js#foreign->js js#console.error js#plist->jso js#js->scm) () #f)

g_cst0_G_gxjs_2d_ffi = new G_ScmString([78,111,116,32,97,32,102,111,114,101,105,103,110,32,111,98,106,101,99,116]);

g_bb1_gxjs_2d_ffi_23_ = function () { // entry-point
  if (g_nargs !== 0) {
    return g_wrong_nargs(g_bb1_gxjs_2d_ffi_23_);
  }
  g_r1 = void 0;
  return g_r0;
};


g_bb1_gxjs_2d_ffi_23_.id = 0;
g_bb1_gxjs_2d_ffi_23_.parent = g_bb1_gxjs_2d_ffi_23_;
g_bb1_gxjs_2d_ffi_23_.nfree = -1;
g_bb1_gxjs_2d_ffi_23_._name = g_make_interned_symbol("gxjs-ffi#");
g_bb1_gxjs_2d_ffi_23_.ctrlpts = null;
g_bb1_gxjs_2d_ffi_23_.info = false;


g_bb1_gxjs_2d_ffi_23_.ctrlpts = [g_bb1_gxjs_2d_ffi_23_];


g_peps["gxjs-ffi#"] = g_bb1_gxjs_2d_ffi_23_;
g_glo["gxjs-ffi#"] = g_bb1_gxjs_2d_ffi_23_;

g_bb1_js_23_alert = function () { // entry-point
  if (g_nargs !== 1) {
    return g_wrong_nargs(g_bb1_js_23_alert);
  }
  var foo = (g_r1);
    var bar = typeof foo === 'string' ? foo : g_scm2host(foo)
    alert(bar);
  g_r1 = void 0;
  return g_r0;
};


g_bb1_js_23_alert.id = 0;
g_bb1_js_23_alert.parent = g_bb1_js_23_alert;
g_bb1_js_23_alert.nfree = -1;
g_bb1_js_23_alert._name = g_make_interned_symbol("js#alert");
g_bb1_js_23_alert.ctrlpts = null;
g_bb1_js_23_alert.info = false;


g_bb1_js_23_alert.ctrlpts = [g_bb1_js_23_alert];


g_peps["js#alert"] = g_bb1_js_23_alert;
g_glo["js#alert"] = g_bb1_js_23_alert;

g_bb1_js_23_console_2e_log = function () { // entry-point
  if (g_nargs !== 1) {
    return g_wrong_nargs(g_bb1_js_23_console_2e_log);
  }
  console.log((g_r1))
  g_r1 = void 0;
  return g_r0;
};


g_bb1_js_23_console_2e_log.id = 0;
g_bb1_js_23_console_2e_log.parent = g_bb1_js_23_console_2e_log;
g_bb1_js_23_console_2e_log.nfree = -1;
g_bb1_js_23_console_2e_log._name = g_make_interned_symbol("js#console.log");
g_bb1_js_23_console_2e_log.ctrlpts = null;
g_bb1_js_23_console_2e_log.info = false;


g_bb1_js_23_console_2e_log.ctrlpts = [g_bb1_js_23_console_2e_log];


g_peps["js#console.log"] = g_bb1_js_23_console_2e_log;
g_glo["js#console.log"] = g_bb1_js_23_console_2e_log;

g_bb1_js_23_console_2e_error = function () { // entry-point
  if (g_nargs !== 1) {
    return g_wrong_nargs(g_bb1_js_23_console_2e_error);
  }
  console.error((g_r1))
  g_r1 = void 0;
  return g_r0;
};


g_bb1_js_23_console_2e_error.id = 0;
g_bb1_js_23_console_2e_error.parent = g_bb1_js_23_console_2e_error;
g_bb1_js_23_console_2e_error.nfree = -1;
g_bb1_js_23_console_2e_error._name = g_make_interned_symbol("js#console.error");
g_bb1_js_23_console_2e_error.ctrlpts = null;
g_bb1_js_23_console_2e_error.info = false;


g_bb1_js_23_console_2e_error.ctrlpts = [g_bb1_js_23_console_2e_error];


g_peps["js#console.error"] = g_bb1_js_23_console_2e_error;
g_glo["js#console.error"] = g_bb1_js_23_console_2e_error;

g_bb1_js_23_js_2d__3e_foreign = function () { // entry-point
  if (g_nargs !== 1) {
    return g_wrong_nargs(g_bb1_js_23_js_2d__3e_foreign);
  }
  g_r1 = g_host2foreign(g_r1);;
  return g_r0;
};


g_bb1_js_23_js_2d__3e_foreign.id = 0;
g_bb1_js_23_js_2d__3e_foreign.parent = g_bb1_js_23_js_2d__3e_foreign;
g_bb1_js_23_js_2d__3e_foreign.nfree = -1;
g_bb1_js_23_js_2d__3e_foreign._name = g_make_interned_symbol("js#js->foreign");
g_bb1_js_23_js_2d__3e_foreign.ctrlpts = null;
g_bb1_js_23_js_2d__3e_foreign.info = false;


g_bb1_js_23_js_2d__3e_foreign.ctrlpts = [g_bb1_js_23_js_2d__3e_foreign];


g_peps["js#js->foreign"] = g_bb1_js_23_js_2d__3e_foreign;
g_glo["js#js->foreign"] = g_bb1_js_23_js_2d__3e_foreign;

g_bb1_js_23_foreign_2d__3e_js = function () { // entry-point
  if (g_nargs !== 1) {
    return g_wrong_nargs(g_bb1_js_23_foreign_2d__3e_js);
  }
  if (g_r1 instanceof G_Foreign) {
    return g_bb5_js_23_foreign_2d__3e_js();
  } else {
    g_stack[g_sp+1] = g_r0;
    g_stack[g_sp+2] = g_r1;
    g_r1 = g_cst0_G_gxjs_2d_ffi;
    g_sp += 2;
    if (--g_pollcount === 0) {
      return g_poll(g_bb3_js_23_foreign_2d__3e_js);
    } else {
      g_r0 = g_bb4_js_23_foreign_2d__3e_js;
      g_nargs = 1;
      return g_glo["##error"]();
    }
  }
};


g_bb1_js_23_foreign_2d__3e_js.id = 0;
g_bb1_js_23_foreign_2d__3e_js.parent = g_bb1_js_23_foreign_2d__3e_js;
g_bb1_js_23_foreign_2d__3e_js.nfree = -1;
g_bb1_js_23_foreign_2d__3e_js._name = g_make_interned_symbol("js#foreign->js");
g_bb1_js_23_foreign_2d__3e_js.ctrlpts = null;
g_bb1_js_23_foreign_2d__3e_js.info = false;

g_bb5_js_23_foreign_2d__3e_js = function () {
  g_r1 = g_foreign2host(g_r1);;
  return g_r0;
};


g_bb5_js_23_foreign_2d__3e_js.id = 1;
g_bb5_js_23_foreign_2d__3e_js.parent = g_bb1_js_23_foreign_2d__3e_js;

g_bb2_js_23_foreign_2d__3e_js = function () {
  g_stack[g_sp+1] = g_r0;
  g_stack[g_sp+2] = g_r1;
  g_r1 = g_cst0_G_gxjs_2d_ffi;
  g_sp += 2;
  if (--g_pollcount === 0) {
    return g_poll(g_bb3_js_23_foreign_2d__3e_js);
  } else {
    g_r0 = g_bb4_js_23_foreign_2d__3e_js;
    g_nargs = 1;
    return g_glo["##error"]();
  }
};


g_bb2_js_23_foreign_2d__3e_js.id = 2;
g_bb2_js_23_foreign_2d__3e_js.parent = g_bb1_js_23_foreign_2d__3e_js;

g_bb3_js_23_foreign_2d__3e_js = function () {
  g_r0 = g_bb4_js_23_foreign_2d__3e_js;
  g_nargs = 1;
  return g_glo["##error"]();
};


g_bb3_js_23_foreign_2d__3e_js.id = 3;
g_bb3_js_23_foreign_2d__3e_js.parent = g_bb1_js_23_foreign_2d__3e_js;

g_bb4_js_23_foreign_2d__3e_js = function () { // return-point
  g_r1 = g_stack[g_sp];
  g_r0 = g_stack[g_sp-1];
  g_sp -= 2;
  return g_bb5_js_23_foreign_2d__3e_js();
};


g_bb4_js_23_foreign_2d__3e_js.id = 4;
g_bb4_js_23_foreign_2d__3e_js.parent = g_bb1_js_23_foreign_2d__3e_js;
g_bb4_js_23_foreign_2d__3e_js.fs = 2;
g_bb4_js_23_foreign_2d__3e_js.link = 1;


g_bb1_js_23_foreign_2d__3e_js.ctrlpts = [g_bb1_js_23_foreign_2d__3e_js,g_bb5_js_23_foreign_2d__3e_js,g_bb2_js_23_foreign_2d__3e_js,g_bb3_js_23_foreign_2d__3e_js,g_bb4_js_23_foreign_2d__3e_js];


g_peps["js#foreign->js"] = g_bb1_js_23_foreign_2d__3e_js;
g_glo["js#foreign->js"] = g_bb1_js_23_foreign_2d__3e_js;

g_bb1_js_23_scm_2d__3e_js = function () { // entry-point
  if (g_nargs !== 1) {
    return g_wrong_nargs(g_bb1_js_23_scm_2d__3e_js);
  }
  var result;
  try {result = g_scm2host(g_r1);} catch (e) {result = Error(e);}
  g_r1 = result;;
  g_r2 = g_r1 instanceof Error;;
  g_r2 = g_host2scm(g_r2);;
  if (!(g_r2 === false)) {
    if (--g_pollcount === 0) {
      return g_poll(g_bb3_js_23_scm_2d__3e_js);
    } else {
      g_nargs = 1;
      return g_glo["##error"]();
    }
  } else {
    return g_r0;
  }
};


g_bb1_js_23_scm_2d__3e_js.id = 0;
g_bb1_js_23_scm_2d__3e_js.parent = g_bb1_js_23_scm_2d__3e_js;
g_bb1_js_23_scm_2d__3e_js.nfree = -1;
g_bb1_js_23_scm_2d__3e_js._name = g_make_interned_symbol("js#scm->js");
g_bb1_js_23_scm_2d__3e_js.ctrlpts = null;
g_bb1_js_23_scm_2d__3e_js.info = false;

g_bb2_js_23_scm_2d__3e_js = function () {
  if (--g_pollcount === 0) {
    return g_poll(g_bb3_js_23_scm_2d__3e_js);
  } else {
    g_nargs = 1;
    return g_glo["##error"]();
  }
};


g_bb2_js_23_scm_2d__3e_js.id = 1;
g_bb2_js_23_scm_2d__3e_js.parent = g_bb1_js_23_scm_2d__3e_js;

g_bb3_js_23_scm_2d__3e_js = function () {
  g_nargs = 1;
  return g_glo["##error"]();
};


g_bb3_js_23_scm_2d__3e_js.id = 2;
g_bb3_js_23_scm_2d__3e_js.parent = g_bb1_js_23_scm_2d__3e_js;

g_bb4_js_23_scm_2d__3e_js = function () {
  return g_r0;
};


g_bb4_js_23_scm_2d__3e_js.id = 3;
g_bb4_js_23_scm_2d__3e_js.parent = g_bb1_js_23_scm_2d__3e_js;


g_bb1_js_23_scm_2d__3e_js.ctrlpts = [g_bb1_js_23_scm_2d__3e_js,g_bb2_js_23_scm_2d__3e_js,g_bb3_js_23_scm_2d__3e_js,g_bb4_js_23_scm_2d__3e_js];


g_peps["js#scm->js"] = g_bb1_js_23_scm_2d__3e_js;
g_glo["js#scm->js"] = g_bb1_js_23_scm_2d__3e_js;

g_bb1_js_23_js_2d__3e_scm = function () { // entry-point
  if (g_nargs !== 1) {
    return g_wrong_nargs(g_bb1_js_23_js_2d__3e_scm);
  }
  g_r1 = g_host2scm(g_r1);;
  return g_r0;
};


g_bb1_js_23_js_2d__3e_scm.id = 0;
g_bb1_js_23_js_2d__3e_scm.parent = g_bb1_js_23_js_2d__3e_scm;
g_bb1_js_23_js_2d__3e_scm.nfree = -1;
g_bb1_js_23_js_2d__3e_scm._name = g_make_interned_symbol("js#js->scm");
g_bb1_js_23_js_2d__3e_scm.ctrlpts = null;
g_bb1_js_23_js_2d__3e_scm.info = false;


g_bb1_js_23_js_2d__3e_scm.ctrlpts = [g_bb1_js_23_js_2d__3e_scm];


g_peps["js#js->scm"] = g_bb1_js_23_js_2d__3e_scm;
g_glo["js#js->scm"] = g_bb1_js_23_js_2d__3e_scm;

g_bb1_js_23_plist_2d__3e_jso = function () { // entry-point
  if (g_nargs !== 1) {
    return g_wrong_nargs(g_bb1_js_23_plist_2d__3e_jso);
  }
  g_r2 = new G_Box(void 0);
  g_r3 = g_make_vector(0,0);
  g_r2.val = g_r3;
  g_stack[g_sp+1] = g_r0;
  g_stack[g_sp+2] = g_r2;
  g_r2 = g_r1;
  g_r1 = g_stack[g_sp+2];
  g_r0 = g_bb8_js_23_plist_2d__3e_jso;
  ++g_sp;
  if (--g_pollcount === 0) {
    return g_poll(g_bb5_js_23_plist_2d__3e_jso);
  } else {
    if (g_r2 === null) {
      return g_bb6_js_23_plist_2d__3e_jso();
    } else {
      return g_bb2_js_23_plist_2d__3e_jso();
    }
  }
};


g_bb1_js_23_plist_2d__3e_jso.id = 0;
g_bb1_js_23_plist_2d__3e_jso.parent = g_bb1_js_23_plist_2d__3e_jso;
g_bb1_js_23_plist_2d__3e_jso.nfree = -1;
g_bb1_js_23_plist_2d__3e_jso._name = g_make_interned_symbol("js#plist->jso");
g_bb1_js_23_plist_2d__3e_jso.ctrlpts = null;
g_bb1_js_23_plist_2d__3e_jso.info = false;

g_bb5_js_23_plist_2d__3e_jso = function () {
  if (g_r2 === null) {
    g_r1 = g_r1.val;
    return g_r0;
  } else {
    g_r3 = g_r2.car;
    g_r4 = g_r2.cdr.car;
    if (g_r4 instanceof G_Foreign) {
      g_r4 = g_foreign2host(g_r4);;
      return g_bb4_js_23_plist_2d__3e_jso();
    } else {
      g_r4 = g_scm2host(g_r4);;
      return g_bb4_js_23_plist_2d__3e_jso();
    }
  }
};


g_bb5_js_23_plist_2d__3e_jso.id = 1;
g_bb5_js_23_plist_2d__3e_jso.parent = g_bb1_js_23_plist_2d__3e_jso;

g_bb8_js_23_plist_2d__3e_jso = function () { // return-point
  g_r1 = Object.fromEntries(Object.entries(g_r1));;
  --g_sp;
  return g_stack[g_sp+1]();
};


g_bb8_js_23_plist_2d__3e_jso.id = 2;
g_bb8_js_23_plist_2d__3e_jso.parent = g_bb1_js_23_plist_2d__3e_jso;
g_bb8_js_23_plist_2d__3e_jso.fs = 1;
g_bb8_js_23_plist_2d__3e_jso.link = 1;

g_bb6_js_23_plist_2d__3e_jso = function () {
  g_r1 = g_r1.val;
  return g_r0;
};


g_bb6_js_23_plist_2d__3e_jso.id = 3;
g_bb6_js_23_plist_2d__3e_jso.parent = g_bb1_js_23_plist_2d__3e_jso;

g_bb2_js_23_plist_2d__3e_jso = function () {
  g_r3 = g_r2.car;
  g_r4 = g_r2.cdr.car;
  if (g_r4 instanceof G_Foreign) {
    g_r4 = g_foreign2host(g_r4);;
    return g_bb4_js_23_plist_2d__3e_jso();
  } else {
    g_r4 = g_scm2host(g_r4);;
    return g_bb4_js_23_plist_2d__3e_jso();
  }
};


g_bb2_js_23_plist_2d__3e_jso.id = 4;
g_bb2_js_23_plist_2d__3e_jso.parent = g_bb1_js_23_plist_2d__3e_jso;

g_bb7_js_23_plist_2d__3e_jso = function () {
  g_r4 = g_foreign2host(g_r4);;
  return g_bb4_js_23_plist_2d__3e_jso();
};


g_bb7_js_23_plist_2d__3e_jso.id = 5;
g_bb7_js_23_plist_2d__3e_jso.parent = g_bb1_js_23_plist_2d__3e_jso;

g_bb4_js_23_plist_2d__3e_jso = function () {
  g_stack[g_sp+1] = g_r1.val;
  g_stack[g_sp+1][g_r3] = g_r4;
  g_r3 = g_stack[g_sp+1];
  g_r1.val = g_r3;
  g_r2 = g_r2.cdr.cdr;
  if (--g_pollcount === 0) {
    return g_poll(g_bb5_js_23_plist_2d__3e_jso);
  } else {
    if (g_r2 === null) {
      return g_bb6_js_23_plist_2d__3e_jso();
    } else {
      return g_bb2_js_23_plist_2d__3e_jso();
    }
  }
};


g_bb4_js_23_plist_2d__3e_jso.id = 6;
g_bb4_js_23_plist_2d__3e_jso.parent = g_bb1_js_23_plist_2d__3e_jso;

g_bb3_js_23_plist_2d__3e_jso = function () {
  g_r4 = g_scm2host(g_r4);;
  return g_bb4_js_23_plist_2d__3e_jso();
};


g_bb3_js_23_plist_2d__3e_jso.id = 7;
g_bb3_js_23_plist_2d__3e_jso.parent = g_bb1_js_23_plist_2d__3e_jso;


g_bb1_js_23_plist_2d__3e_jso.ctrlpts = [g_bb1_js_23_plist_2d__3e_jso,g_bb5_js_23_plist_2d__3e_jso,g_bb8_js_23_plist_2d__3e_jso,g_bb6_js_23_plist_2d__3e_jso,g_bb2_js_23_plist_2d__3e_jso,g_bb7_js_23_plist_2d__3e_jso,g_bb4_js_23_plist_2d__3e_jso,g_bb3_js_23_plist_2d__3e_jso];


g_peps["js#plist->jso"] = g_bb1_js_23_plist_2d__3e_jso;
g_glo["js#plist->jso"] = g_bb1_js_23_plist_2d__3e_jso;

g_module_register([[g_make_interned_symbol("gxjs-ffi")],[],null,1,g_bb1_gxjs_2d_ffi_23_,false]);

